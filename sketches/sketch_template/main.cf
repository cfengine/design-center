body file control
{
  namespace => "cfdc_sketch_template";
}

bundle agent entry(runenv, metadata, prefix, myboolean, mytype, myip, mylist, myarray)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");

      # call the sample.sh script
      "sample_return" string => execresult("$($(metadata)[location])/scripts/sample.sh",
                                           "useshell");

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  commands:
      # call a module included with the bundle
      "$($(metadata)[location])/modules/mymodule"
      module => "true";

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    cfengine::
      # This will define localclass with a locally meaningful prefix
      # every time (otherwise, localclass will be global and will be
      # defined with the same name every time).
      "$(this.bundle): Hello there"
      classes => default:if_repaired("$(canon_prefix)localclass");

      # And this will use the localclass
      "$(this.bundle): Hello back"
      ifvarclass => "$(canon_prefix)localclass";

      "$(this.bundle): running the external sample script gave us $(sample_return)";

      "$(this.bundle): got myboolean=$(myboolean)";
      "$(this.bundle): got mytype=$(mytype)";
      "$(this.bundle): got myip=$(myip)";
      "$(this.bundle): got mylist=$(mylist)";
      "$(this.bundle): got myarray=$(myarray)";

      "[anything I want to return goes here]" bundle_return_value_index => "myreturn";
      "[anything else I want to return goes here]" bundle_return_value_index => "myreturn2";

      # use the "verbose" context to show the sketch operation (for the user)
    verbose::
      "$(this.bundle): running in verbose mode";
      # use the "test" context to help debug the sketch (for the developer)
    test::
      "$(this.bundle): running in test mode";
}
