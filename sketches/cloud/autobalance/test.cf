body common control
{
      bundlesequence => { cfsketch_g, cfsketch_run };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "../../cloud/cloud_common/library.cf", "../../cloud/openstack/main.cf", "../../libraries/dclib-3.5.0/library.cf", "../../utilities/data_classes/main.cf", "../../cloud/aws_ec2/main.cf", "main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'mymetadata' from definition sketch metadata, activation ___001_Cloud_Autobalance_autobalance
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][collector][type]" string => "string";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][common_options][type]" string => "array";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][ec2_options][type]" string => "list";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][mymetadata][type]" string => "metadata";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][openstack_options][type]" string => "list";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][runenv][type]" string => "environment";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][thresholds][type]" string => "array";
      "___001_Cloud_Autobalance_autobalance_mymetadata[api][url][type]" string => "string";
      "___001_Cloud_Autobalance_autobalance_mymetadata[authors]" slist => { "Ted Zlatanov <tzz@lifelogs.com>" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[depends]" slist => { "Cloud::Services::AWS::EC2", "Cloud::Services::OpenStack", "Data::Classes" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[license]" string => "MIT";
      "___001_Cloud_Autobalance_autobalance_mymetadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/cloud/autobalance";
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest]" slist => { "README.md", "main.cf", "params/demo.json", "test.cf", "test.pl" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest_cf]" slist => { "main.cf", "test.cf" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest_docs]" slist => { "README.md" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest_exe]" slist => { "cf_null" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest_extra]" slist => { "params/demo.json" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[manifest_test]" slist => { "test.pl" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[name]" string => "Cloud::Autobalance";
      "___001_Cloud_Autobalance_autobalance_mymetadata[tags]" slist => { "cfdc", "cloud", "balance", "ec2", "openstack" };
      "___001_Cloud_Autobalance_autobalance_mymetadata[version]" string => "1";

      # array 'thresholds' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/cloud/autobalance/params/demo.json, activation ___001_Cloud_Autobalance_autobalance
      "___001_Cloud_Autobalance_autobalance_thresholds[critical][ec2]" string => "3";
      "___001_Cloud_Autobalance_autobalance_thresholds[critical][openstack]" string => "3";
      "___001_Cloud_Autobalance_autobalance_thresholds[high][ec2]" string => "2";
      "___001_Cloud_Autobalance_autobalance_thresholds[high][openstack]" string => "2";
      "___001_Cloud_Autobalance_autobalance_thresholds[normal][ec2]" string => "1";
      "___001_Cloud_Autobalance_autobalance_thresholds[normal][openstack]" string => "1";
      "___001_Cloud_Autobalance_autobalance_thresholds[off][ec2]" string => "0";
      "___001_Cloud_Autobalance_autobalance_thresholds[off][openstack]" string => "0";

      # list 'ec2_options' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/cloud/autobalance/params/demo.json, activation ___001_Cloud_Autobalance_autobalance
      "___001_Cloud_Autobalance_autobalance_ec2_options" slist => { "ami-a29943cb", "us-east-1", "t1.micro", "cfworker", "1", "$(sys.ipv4)" };

      # list 'openstack_options' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/cloud/autobalance/params/demo.json, activation ___001_Cloud_Autobalance_autobalance
      "___001_Cloud_Autobalance_autobalance_openstack_options" slist => { "cfworker", "1", "$(sys.ipv4)" };

      # array 'common_options' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/cloud/autobalance/params/demo.json, activation ___001_Cloud_Autobalance_autobalance
      "___001_Cloud_Autobalance_autobalance_common_options[image]" string => "5cebb13a-f783-4f8c-8058-c4182c724ccd";
      "___001_Cloud_Autobalance_autobalance_common_options[master]" string => "cfmaster";
      "___001_Cloud_Autobalance_autobalance_common_options[netrc]" string => "/home/tzz/.netrc";
      "___001_Cloud_Autobalance_autobalance_common_options[security_group]" string => "default";
      "___001_Cloud_Autobalance_autobalance_common_options[ssh_pub_key]" string => "/root/.ssh/id_rsa.pub";

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "___001_Cloud_Autobalance_autobalance" usebundle => cfdc_cloud:autobalance("cf_sketch_testing", "default:cfsketch_run.___001_Cloud_Autobalance_autobalance_mymetadata", "file:///tmp/status.txt", "/usr/bin/curl -s", "default:cfsketch_run.___001_Cloud_Autobalance_autobalance_thresholds", @(cfsketch_run.___001_Cloud_Autobalance_autobalance_ec2_options), @(cfsketch_run.___001_Cloud_Autobalance_autobalance_openstack_options), "default:cfsketch_run.___001_Cloud_Autobalance_autobalance_common_options"), ifvarclass => "any", useresult => "return____001_Cloud_Autobalance_autobalance";

  reports:
    inform_mode::
      "activation ___001_Cloud_Autobalance_autobalance could not run because it requires classes any" ifvarclass => "inform_mode.!(any)";
}
