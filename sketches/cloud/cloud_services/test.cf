# This test file uses params/demo.json with some minor adjustments for readability

# run it with:

# cf-agent -KI -f test.cf -Dstart1_ec2
# cf-agent -KI -f test.cf -Dstop1_ec2


body common control
{
      bundlesequence => { "cfsketch_run" };
      inputs => { "../../libraries/copbl/cfengine_stdlib.cf", "./main.cf" };
}

bundle common cfsketch_g
{
  classes:
      "cloud_services_ec2_test_activated" expression => "any";
      "cloud_services_ec2_test_install_cfengine" expression => "any";

      "cloud_services_vcli_test_activated" expression => "any";
      "cloud_services_vcli_test_install_cfengine" expression => "any";

  vars:
       # string versions of the contexts for activation 001
      "cloud_services_ec2_test_contexts_text[activated]" string => "ON";
      "cloud_services_ec2_test_contexts_text[install_cfengine]" string => "ON";
       # string and slist variables for activation 001

      # you will probably want to adjust this if you're not in the
      # same directory as test.cf
       "cloud_services_ec2_test_bundle_home" string => dirname("$(this.promise_filename)");
       # array variables for activation 001
       "cloud_services_ec2_test_bycontext[start1_ec2][class]" string => "cfworker";
       "cloud_services_ec2_test_bycontext[start1_ec2][count]" string => "1";
       "cloud_services_ec2_test_bycontext[start1_ec2][state]" string => "start";
       "cloud_services_ec2_test_bycontext[start1_ec2][stype]" string => "ec2";
       "cloud_services_ec2_test_bycontext[stop1_ec2][class]" string => "cfworker";
       "cloud_services_ec2_test_bycontext[stop1_ec2][count]" string => "0";
       "cloud_services_ec2_test_bycontext[stop1_ec2][state]" string => "stop";
       "cloud_services_ec2_test_bycontext[stop1_ec2][stype]" string => "ec2";
       "cloud_services_ec2_test_ec2[ami]" string => "ami-b89842d1";
       "cloud_services_ec2_test_ec2[aws_access_key]" string => "akey1";
       "cloud_services_ec2_test_ec2[aws_secret_key]" string => "skey1";
       "cloud_services_ec2_test_ec2[instance_type]" string => "m1.small";
       "cloud_services_ec2_test_ec2[region]" string => "us-east-1";
       "cloud_services_ec2_test_ec2[security_group]" string => "mygroup";
       "cloud_services_ec2_test_ec2[ssh_pub_key]" string => "/var/tmp/mysshkey.pub";

       # string versions of the contexts for activation 001
      "cloud_services_vcli_test_contexts_text[activated]" string => "ON";
      "cloud_services_vcli_test_contexts_text[install_cfengine]" string => "ON";
       # string and slist variables for activation 001

      # you will probably want to adjust this if you're not in the
      # same directory as test.cf
      "cloud_services_vcli_test_bundle_home" string => dirname("$(this.promise_filename)");
      # array variables for activation 001
      "cloud_services_vcli_test_bycontext[start1_vcli][class]" string => "cfworker";
      "cloud_services_vcli_test_bycontext[start1_vcli][count]" string => "1";
      "cloud_services_vcli_test_bycontext[start1_vcli][state]" string => "start";
      "cloud_services_vcli_test_bycontext[start1_vcli][stype]" string => "vcli";
      "cloud_services_vcli_test_bycontext[start1_vcli][disable_ssl_verify]" string => "1";
      "cloud_services_vcli_test_bycontext[stop1_vcli][class]" string => "cfworker";
      "cloud_services_vcli_test_bycontext[stop1_vcli][count]" string => "0";
      "cloud_services_vcli_test_bycontext[stop1_vcli][state]" string => "stop";
      "cloud_services_vcli_test_bycontext[stop1_vcli][stype]" string => "vcli";
      "cloud_services_vcli_test_bycontext[stop1_vcli][disable_ssl_verify]" string => "1";
      "cloud_services_vcli_test_vcli[datastore]" string => "datastore1";
      "cloud_services_vcli_test_vcli[fullpath]" string => "/vmfs/volumes/4fda02bc-744a4c6e-40f2-08002781db6f";
      "cloud_services_vcli_test_vcli[password]" string => "cfengine";
      "cloud_services_vcli_test_vcli[user]" string => "root";
      "cloud_services_vcli_test_vcli[esxi_server]" string => "10.0.0.1";
      "cloud_services_vcli_test_vcli[master_image]" string => "ubuntu-12.04-i386-master";
      "cloud_services_vcli_test_vcli[child_prefix]" string => "ubuntu-12.04-i386-clone-";

  reports:
    verbose::
      "we will look for the EC2 shim script in $(cloud_services_ec2_test_bundle_home)/scripts";
}

bundle agent cfsketch_run
{
  methods:
      "cfsketch_g" usebundle => "cfsketch_g";
      # "test from your own demo.json" usebundle => cloud_services("cfsketch_g.cloud_services_ec2_test_");
      "test from your own demo.json" usebundle => cloud_services("cfsketch_g.cloud_services_vcli_test_");
}
