body file control
{
      namespace => "cfdc_memcached";
}

bundle agent server(runenv, metadata, port, user, maxconn, cachesize, listen)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

  methods:
      "utils" usebundle => default:eu($(runenv));

      "MEMCACHED INSTALL $(runenv)"
      usebundle => install,
      inherit => "true",
      useresult => "install_return";

      "MEMCACHED CONFIGURE $(runenv)"
      usebundle => conf($(runenv), $(metadata), "$(install_return[package_status])", $(port), $(user), $(maxconn), $(cachesize), $(listen)),
      inherit => "true",
      useresult => "config_return";

      "MEMCACHED PROCESS $(runenv)"
      inherit => "true",
      usebundle => proc("$(config_return[service_mode])");

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";
}

bundle agent install
{
  packages:
    not_test.(redhat|centos|fedora)::
      "memcached"
      package_policy => "add",
      classes => default:if_ok("memcached_installed"),
      package_method => default:yum;
    not_test.(ubuntu|debian)::
      "memcached"
      package_policy => "add",
      classes => default:if_ok("memcached_installed"),
      package_method => default:apt;

  reports:
    verbose.memcached_installed::
      "$(this.bundle): Installed memcache successfully.";
    verbose.not_test.!memcached_installed::
      "$(this.bundle): Could not install memcache successfully.";

    memcached_installed::
      "1" bundle_return_value_index => "package_status";
    not_test.!memcached_installed::
      "0" bundle_return_value_index => "package_status";
    test::
      "$(this.bundle): Overriding bundle return status to success (1) in test mode";
      "1" bundle_return_value_index => "package_status";
}

bundle agent conf(runenv, metadata, pkg_status, port, user, maxconn, cachesize, listen)
{
  classes:
      "memcached_installed" expression => strcmp("1", $(pkg_status));

  files:
    memcached_installed.(redhat|centos)::
      "$(default:eu.path_prefix)/etc/sysconfig/memcached"
      create => "true",
      edit_defaults => default:empty,
      perms => default:m("644"),
      classes => default:if_repaired("config_repaired"),
      edit_line => redhat_insert_lines($(port),$(user),$(maxconn),$(cachesize),$(listen));

    memcached_installed.(ubuntu|debian)::
      "$(default:eu.path_prefix)/etc/memcached.conf"
      create => "true",
      edit_defaults => default:empty,
      perms => default:m("644"),
      classes => default:if_repaired("config_repaired"),
      edit_line => debian_insert_lines($(port),$(user),$(maxconn),$(cachesize),$(listen));

      "$(default:eu.path_prefix)/etc/default/memcached"
      create => "true",
      classes => default:if_repaired("config_repaired"),
      edit_defaults => default:empty,
      edit_line => default:insert_lines("ENABLE_MEMCACHED=yes");

  reports:
    config_repaired::
      "restart" bundle_return_value_index => "service_mode";
    !config_repaired::
      "start" bundle_return_value_index => "service_mode";
}

bundle agent proc(service_mode)
{
  classes:
      "conf_repaired" expression => strcmp("restart",$(service_mode));

  processes:
    !conf_repaired::
      "memcached"
      restart_class => "proc_start";

  commands:
    conf_repaired::
      "$(default:eu.exec_prefix)/etc/init.d/memcached restart";
    proc_start::
      "$(default:eu.exec_prefix)/etc/init.d/memcached start";
}

bundle edit_line debian_insert_lines(port, user, maxconn, cachesize, listen)
{
  insert_lines:
      "#
# Configured by CFEngine. Local changes will be lost.
#
# memcached default config file
# 2003 - Jay Bonci <jaybonci@debian.org>
# This configuration file is read by the start-memcached script provided as
# part of the Debian GNU/Linux distribution.

# Run memcached as a daemon. This command is implied, and is not needed for the
# daemon to run. See the README.Debian that comes with this package for more
# information.
-d

# Log memcached's output to /var/log/memcached
logfile /var/log/memcached.log

# Be verbose
-v

# Be even more verbose (print client commands as well)
# -vv

# Start with a cap of 64 megs of memory. It's reasonable, and the daemon default
# Note that the daemon will grow to this size, but does not start out holding this much
# memory
-m $(cachesize)

# Default connection port is 11211
-p $(port)

# Run the daemon as root. The start-memcached will default to running as root if no
# -u command is present in this config file
-u $(user)

# Specify which IP address to listen on. The default is to listen on all IP addresses
# This parameter is one of the only security measures that memcached has, so make sure
# it's listening on a firewalled interface.
-l $(listen)

# Limit the number of simultaneous incoming connections. The daemon default is 1024
-c $(maxconn)

# Lock down all paged memory. Consult with the README and homepage before you do this
# -k

# Return error when memory is exhausted (rather than removing items)
# -M

# Maximize core file limit
# -r";
}

bundle edit_line redhat_insert_lines(port, user, maxconn, cachesize, listen)
{
  insert_lines:
      "PORT=\"$(port)\"
USER=\"$(user)\"
MAXCONN=\"$(maxconn)\"
CACHESIZE=\"$(cachesize)\"
OPTIONS=\"-l $(listen)\"";
}
