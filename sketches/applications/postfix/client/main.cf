body file control
{
      namespace => "cfdc_postfix";
}

bundle agent client(runenv,metadata,given_conf_file,myhostname,mydomain,myorigin,relayhost,mynetworks)
{

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "conf_file" string => "$(default:eu.path_prefix)$(given_conf_file)";

  methods:
      "utils" usebundle => default:eu($(runenv));

      "POSTFIX INSTALL $(runenv)"
      usebundle => install,
      inherit => "true",
      useresult => "install_return";

      "POSTFIX CONFIGURE $(runenv)"
      usebundle => conf($(install_return[package_status]),$(conf_file),$(myhostname),$(mydomain),$(myorigin),$(relayhost),$(mynetworks)),
      inherit => "true",
      useresult => "config_return";

      "POSTFIX PROCESS $(runenv)"
      inherit => "true",
      usebundle => proc("$(config_return[service_mode])");

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";
}

bundle agent install
{
  packages:
    not_test.(ubuntu|debian)::
      "postfix"
      package_policy => "add",
      classes => default:if_ok("applications_postfix_installed"),
      package_method => default:apt;
    not_test.(centos|redhat|fedora)::
      "postfix"
      package_policy => "add",
      classes => default:if_ok("applications_postfix_installed"),
      package_method => default:yum;

  reports:
    verbose.applications_postfix_installed::
      "$(this.bundle): Installed Nagios NRPE server successfully.";
    verbose.not_test.!applications_postfix_installed::
      "$(this.bundle): Could not install Nagios NRPE server successfully.";

    applications_postfix_installed::
      "1" bundle_return_value_index => "package_status";
    not_test.!applications_postfix_installed::
      "0" bundle_return_value_index => "package_status";
    test::
      "$(this.bundle): Overriding bundle return status to success (1) in test mode";
      "1" bundle_return_value_index => "package_status";
}

bundle agent conf(pkg_status,conf_file,myhostname,mydomain,myorigin,relayhost,mynetworks)
{
  classes:
      "postfix_installed" expression => strcmp("1", $(pkg_status));

  files:
    postfix_installed.(ubuntu|debian)::
      "$(default:eu.path_prefix)$(conf_file)"
      create => "true",
      edit_defaults => default:empty,
      classes => default:if_repaired("applications_postfix_config_repaired"),
      perms => default:mog("644","root","root"),
      edit_line => edit_conf($(myhostname),$(mydomain),$(myorigin),$(relayhost),$(mynetworks));

  reports:
    applications_postfix_config_repaired::
      "restart" bundle_return_value_index => "service_mode";
    !applications_postfix_config_repaired::
      "start" bundle_return_value_index => "service_mode";
}

bundle agent proc(service_mode)
{
  classes:
      "applications_postfix_conf_repaired" expression => strcmp("restart",$(service_mode));

  processes:
    !applications_postfix_conf_repaired::
      ""
      restart_class => "applications_postfix_proc_start";

  commands:
    applications_postfix_conf_repaired::
      "$(default:eu.exec_prefix)/etc/init.d/postfix restart";
    applications_postfix_proc_start::
      "$(default:eu.exec_prefix)/etc/init.d/postfix start";
}

bundle edit_line edit_conf(myhostname,mydomain,myorigin,relayhost,mynetworks)
{
  insert_lines:
      "# Generated by CFEngine. Local changes will be overwritten

biff = no
append_dot_mydomain = no
myhostname = $(myhostname)
mydomain = $(mydomain)
myorigin = $(myorigin)
smtpd_banner = $myhostname ESMTP $mail_name
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
mydestination = $(myhostname), $(sys.fqhost), localhost.localdomain, localhost
relayhost = $(relayhost)
mynetworks = $(mynetworks)
inet_interfaces = loopback-only
mailbox_size_limit = 0
recipient_delimiter = +";
}

