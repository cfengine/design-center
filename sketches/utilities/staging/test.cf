body common control
{
      bundlesequence => { cfsketch_g, cfsketch_run };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib-3.5.0/library.cf", "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'metadata' from definition sketch metadata, activation ___001_Utilities_Staging_stage
      "___001_Utilities_Staging_stage_metadata[api][dest_dir][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][directory][type]" string => "return";
      "___001_Utilities_Staging_stage_metadata[api][dirmode][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][filemode][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][group][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][metadata][type]" string => "metadata";
      "___001_Utilities_Staging_stage_metadata[api][options][type]" string => "array";
      "___001_Utilities_Staging_stage_metadata[api][owner][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][runenv][type]" string => "environment";
      "___001_Utilities_Staging_stage_metadata[api][source_dir][type]" string => "string";
      "___001_Utilities_Staging_stage_metadata[api][staged][type]" string => "return";
      "___001_Utilities_Staging_stage_metadata[authors]" slist => { "Ted Zlatanov <tzz@lifelogs.com>" };
      "___001_Utilities_Staging_stage_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::dclib::3.5.0", "CFEngine::stdlib" };
      "___001_Utilities_Staging_stage_metadata[license]" string => "MIT";
      "___001_Utilities_Staging_stage_metadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/utilities/staging";
      "___001_Utilities_Staging_stage_metadata[manifest]" slist => { "README.md", "main.cf", "params/demo.json", "test.cf", "test.pl" };
      "___001_Utilities_Staging_stage_metadata[manifest_cf]" slist => { "main.cf", "test.cf" };
      "___001_Utilities_Staging_stage_metadata[manifest_docs]" slist => { "README.md" };
      "___001_Utilities_Staging_stage_metadata[manifest_exe]" slist => { "cf_null" };
      "___001_Utilities_Staging_stage_metadata[manifest_extra]" slist => { "params/demo.json" };
      "___001_Utilities_Staging_stage_metadata[manifest_test]" slist => { "test.pl" };
      "___001_Utilities_Staging_stage_metadata[name]" string => "Utilities::Staging";
      "___001_Utilities_Staging_stage_metadata[tags]" slist => { "cfdc", "stage", "directory", "rsync" };
      "___001_Utilities_Staging_stage_metadata[version]" string => "1";

      # array 'options' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/utilities/staging/params/demo.json, activation ___001_Utilities_Staging_stage
      "___001_Utilities_Staging_stage_options[excluded]" slist => { ".cvs", ".svn", ".subversion", ".git", ".bzr" };
      "___001_Utilities_Staging_stage_options[postcommand]" string => "/bin/echo postcommand";
      "___001_Utilities_Staging_stage_options[precommand]" string => "/bin/echo precommand";

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "___001_Utilities_Staging_stage" usebundle => cfdc_staging:stage("cf_sketch_testing", "default:cfsketch_run.___001_Utilities_Staging_stage_metadata", "/var/tmp/files", "/var/tmp/files_staged", getenv("LOGNAME", "128"), getenv("LOGNAME", "128"), "755", "644", "default:cfsketch_run.___001_Utilities_Staging_stage_options"), ifvarclass => "any", useresult => "return____001_Utilities_Staging_stage";

  reports:
    inform_mode::
      "activation ___001_Utilities_Staging_stage returned staged = $(return____001_Utilities_Staging_stage[staged])";
      "activation ___001_Utilities_Staging_stage returned directory = $(return____001_Utilities_Staging_stage[directory])";
      "activation ___001_Utilities_Staging_stage could not run because it requires classes any" ifvarclass => "inform_mode.!(any)";
}
