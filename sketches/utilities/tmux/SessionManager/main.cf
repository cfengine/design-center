bundle agent utilities_tmux_sessionmanager(prefix, bundle_home, tmux_bin, su_bin, command, session_name, context_remove_session, runas, tmux_config, tmux_config_path, context_remove_config, context_conf_emptyfirst)
{
# This sketch expects to be executed as root, it uses /bin/su to manage a users session
defaults:
  any::
    "tmux_bin"
      string => "/usr/bin/tmux",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "su_bin"
      string => "/bin/su",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "command"
      string => "",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "session_name"
      string => canonify("$(prefix)"),
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "context_remove_session"
      string => "!any", # Remove or create session
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "context_remove_config"
      string => "!any", # Remove or create session
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "runas"
      string => "root",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "tmux_config"
      slist => { "" }, # - no defaults
      if_match_regex  => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "tmux_config_path"
      string => "~/.tmux.conf",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

    "context_conf_emptyfirst"
      string => "!any",
      if_match_regex => "(\$\([a-zA-Z0-9_.]+\)){1}|cf_null|default";

meta:
    # __PREFIX__ will be supplied by cf-sketch
    "vars[prefix][type]"    string => "NON_EMPTY_STRING";
    "vars[prefix][default]" string => "__PREFIX__";

    "vars[bundle_home][type]"    string => "NON_EMPTY_STRING";
    "vars[bundle_home][default]" string => "__ABS_BUNDLE_HOME__";
    
    "vars[tmux_bin][type]"    string => "PATH";
    "vars[tmux_bin][default]" string => "/usr/bin/tmux";

    "vars[su_bin][type]"    string => "PATH";
    "vars[su_bin][default]" string => "/bin/su";

    "vars[command][type]"    string => "STRING";
    "vars[command][default]" string => "";

    "vars[session_name][type]"    string => "NON_EMPTY_STRING";
    "vars[session_name][default]" string => "__PREFIX__";

    "vars[context_remove_session][type]"    string => "CONTEXT";
    "vars[context_remove_session][default]" string => "!any";

    "vars[context_remove_config][type]"    string => "CONTEXT";
    "vars[context_remove_config][default]" string => "!any";

    "vars[runas][type]"    string => "NON_EMPTY_STRING";
    "vars[runas][default]" string => "root";

    "vars[tmux_config][type]"    string => "LIST(NON_EMPTY_STRING)";

    "vars[tmux_config_path][type]"    string => "PATH";
    "vars[tmux_config_path][default]" string => "~/.tmux.conf";

    "vars[context_conf_emptyfirst][type]"    string => "CONTEXT";
    "vars[context_conf_emptyfirst][default]" string => "!any";


vars:
  any::
    # often you need a unique value for the current run through a
    # bundle, especially if you use if_repaired and such. The
    # canon_prefix will give you that.
    "canon_prefix" string => canonify("$(prefix)");


files:
  any::
    # Create config with only specified content
    "$(tmux_config_path)"
      create => "true",
      edit_defaults => empty,
      edit_line => append_if_no_lines("@($(this.bundle).tmux_config)"),
      perms => mo("600", "$(runas)"),
      ifvarclass => and(not("$(context_remove_config)"), "$(context_conf_emptyfirst)");

    # Create the config with proper content, but dont remove any non specified lines
    "$(tmux_config_path)"
      create => "true",
      edit_line => append_if_no_lines("@($(this.bundle).tmux_config)"),
      perms => mo("600", "$(runas)"),
      ifvarclass => and(not("$(context_remove_config)"), not("$(context_conf_emptyfirst)"));

    
    "$(tmux_config_path)"
      delete => tidy,
      ifvarclass => "$(context_remove_config)";



commands:
  any::
    "$(su_bin)"
      comment => "Determine if there is an existing session with name $(session_name)",
      handle  => "utilities_tmux_commands_any_determine_session_existance",
      args    => "-l $(runas) -c '$(tmux_bin) has-session -t $(session_name)'",
      contain => in_shell,
      classes => if_ok("$(canon_prefix)_tmux_session_exists");  

    # Only start the session if we are NOT in the context to remove a session
    # Only start the session with a config file if we have not promised to remove it
    "$(su_bin)"
      comment    => "Start the desired tmux session since it does not exist, using the promised config file",
      handle     => "utilities_tmux_comands_create_session",
      args       => "-l $(runas) -c '$(tmux_bin) -f $(tmux_config_path) new-session -d -s $(session_name) $(command)'",
      contain    => in_shell,
      ifvarclass => and(and(not("$(canon_prefix)_tmux_session_exists"),not("$(context_remove_session)"), not("$(context_remove_config)"))),
      classes    => if_repaired("$(canon_prefix)_created_tmux_session");

    "$(su_bin)"
      comment    => "Start the desired tmux session since it does not exist,
                     use /dev/null as the config file since we have promised to
                     remove the config. This prevents a benign error during
                     tmux startup, and also assures we arent using an untrusted
                     default config.",
      handle     => "utilities_tmux_comands_create_session",
      args       => "-l $(runas) -c '$(tmux_bin) -f /dev/null new-session -d -s $(session_name) $(command)'",
      contain    => in_shell,
      ifvarclass => and(and(not("$(canon_prefix)_tmux_session_exists"),not("$(context_remove_session)"), "$(context_remove_config)")),
      classes    => if_repaired("$(canon_prefix)_created_tmux_session");


    # Only kill the session if we are in the context to remove the session
    "$(su_bin)"
      comment => "Kill the unwanted session $(session_name) in context $(context_remove_session)",
      handle => "utilities_tmux_commands_kill_session",
      args => "-l $(runas) -c '$(tmux_bin) kill-session -t $(session_name)'",
      contain => in_shell,
      ifvarclass => "$(canon_prefix)_tmux_session_exists.$(context_remove_session)",
      classes => if_repaired("$(canon_prefix)_killed_tmux_session");
      

reports:
  verbose_mode|inform_mode::
    "Created the tmux session for $(session_name)",
      ifvarclass => "$(canon_prefix)_created_tmux_session";

    "Tmux session $(session_name) exists as promised",
      ifvarclass => and(not("$(context_remove_session)"), "$(canon_prefix)_tmux_session_exists");

    "Terminated $(session_name) in context $(context_remove_session) as promised",
      ifvarclass => "$(canon_prefix)_killed_tmux_session";
}
