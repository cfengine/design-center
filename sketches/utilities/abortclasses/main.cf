# -*- mode: cfengine3; indent-tabs-mode: nil; cfengine-parameters-indent: (promise pname 2); -*-
# vi:tabstop=2:expandtab

# N.B. Namespacing this sketch would make it much harder to use.  So we didn't.

bundle agent abortclasses_filebased(runenv, metadata, abortclass, trigger_file, alert_only, trigger_context, timeout)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    "timeout_action" string => "$($(timeout)[action])";

  classes:
      "alert_only" expression => strcmp("$(alert_only)", "1");

      "timeout_enabled" expression => strcmp("$($(timeout)[enabled])", "1");

      # since abortclasses does not respect --dry-run (opt_dry_run), dry-run mode implies alert-only
      # its useful to see what might happen on the system if it were not in manual mode.
      "alert_only" or => { "opt_dry_run", "default:test" }; # dry-run mode implies alert-only

      "fileexists" expression => fileexists($(trigger_file));

  files:
    timeout_enabled::
      "$(trigger_file)"
        touch => "true", # Touching the file resets the timeout period, we attempt to do this because
                         # file_select alone is not sufficient to comprise a promise cabable of defining
                         # a class. An actionable attribute must accompany its filtering capability. If
                         # we are unable to update the timestamp of the file, for example because its 
                         # been set immutable this bundle will be activated during each execution of the
                         # agent.
                         # This bundle will execute any time the provided timeout is older than
                         # the mtime of the trigger_file
        file_select => abortclasses_not_modified_since("$($(timeout)[years])",
                                                       "$($(timeout)[months])",
                                                       "$($(timeout)[days])",
                                                       "$($(timeout)[hours])",
                                                       "$($(timeout)[minutes])",
                                                       "$($(timeout)[seconds])"), 
        ifvarclass => "$(trigger_context)",
        classes => abortclasses_if_repaired_failed("trigger_timeout_action", "trigger_timeout_action");
                # We define the trigger_timeout_action class on repair or fail because it meets the 
                # minimum criteria of the file has not been modified inside the window.

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

    fileexists::
      # We always alert if the trigger is tripped.
      "send alert"
        usebundle  => abortclasses_alert,
        comment    => "Raise alert that $(trigger_file) exists";

    fileexists.trigger_timeout_action::
      "Trigger Timeout Action"
        # This bundle is executed when the mtime of the file(years, months, days, hours, minutes, seconds)
        # begining from mtime of $(trigger_file).
        usebundle => $(timeout_action)("$(trigger_file)",
                                       "$($(timeout)[years])",
                                       "$($(timeout)[months])",
                                       "$($(timeout)[days])",
                                       "$($(timeout)[hours])",
                                       "$($(timeout)[minutes])",
                                       "$($(timeout)[seconds])"), 
        comment => "Call $(timeout_action) for $(trigger_file) on interval";


    fileexists.!alert_only::
      # Raise a class that matches abortclasses defined in body control executor
      "do abort"
        usebundle  => abortclasses_abort($(abortclass)),
        ifvarclass => "$(trigger_context)",
        comment    => "Define $(abortclass) since file $(trigger_file) exists in the context of $(trigger_context)"; 

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    verbose::
      "$(this.bundle): trigger_file: $(trigger_file)";
      "$(this.bundle): abortclass: $(abortclass)";
      "$(this.bundle): alert_only: $(alert_only)";
      "$(this.bundle): trigger_context: $(trigger_context)";
      "$(this.bundle): timeout[enabled]: $($(timeout)[enabled])";
      "$(this.bundle):$(const.t)timeout[action]: $($(timeout)[action])";
      "$(this.bundle):$(const.t)timeout[years]: $($(timeout)[years])";
      "$(this.bundle):$(const.t)timeout[months]: $($(timeout)[months])";
      "$(this.bundle):$(const.t)timeout[days]: $($(timeout)[days])";
      "$(this.bundle):$(const.t)timeout[hours]: $($(timeout)[hours])";
      "$(this.bundle):$(const.t)timeout[minutes]: $($(timeout)[minutes])";
      "$(this.bundle):$(const.t)timeout[seconds]: $($(timeout)[seconds])";

      "abortclasses: trigger_context: $(trigger_context) not currently defined, will not actually abort",
        ifvarclass => "$(trigger_context)";

    verbose.timeout_trigger::
      "abortclasses: timeout trigger mode!!!";
    test.alert_only::
      "abortclasses: alert-only mode!!!";
    test::
      "abortclasses: 'test' context class implies alert_only";
    verbose.updated_mtime_of_trigger_file::
      "abortclasses: updated mtime of trigger file";

}

#
# Raise alert that agent will abort
#
bundle agent abortclasses_alert
{
  reports:
    cfengine::
      "$(this.bundle): Warning: system is under manual control!!!"
      comment => "Alert that system is under manual control";

}

#
# Abort execution of the agent if the specified file exists
#
bundle agent abortclasses_abort(abort_class)
{
  classes:
      "$(abort_class)"
      expression => "any",
      comment => "Set the abort class";

}

#######################
#  Supporting bodies  #
#######################

#
# Select file with timestamp older than specified time
#
body file_select abortclasses_not_modified_since(years, months, days, hours, minutes, seconds)
# This will match the file if the files mtime is older than the supplied time difference to now.
{
  mtime       => irange(0,ago("$(years)", "$(months)", "$(days)", "$(hours)", "$(minutes)", "$(seconds)"));
  #mtime       => irange(ago("$(years)", "$(months)", "$(days)", "$(hours)", "$(minutes)", "$(seconds)"), now);
  file_result => "mtime";
}

#
# Raise class yes if repaired, class no if failed, denied, or timed out
#
body classes abortclasses_if_repaired_failed(yes, no)
{
promise_repaired => { "$(yes)" };
repair_failed    => { "$(no)" };
repair_denied    => { "$(no)" };
repair_timeout   => { "$(no)" };
}


####################################
#  Example Trigger Action Bundles  #
####################################
bundle agent abortclasses_timeout_action_noop(file, years, months, days, hours, minutes, seconds)
# Example trigger action bundle
#
# Just a noop bundle as a default
{
reports:
  !any::
    "Never gonna get it";
}

bundle agent abortclasses_pester_lester(file, years, months, days, hours, minutes, seconds)
# Example trigger action bundle
#
# Be annoying with output nagging anyone who might be logged into the system to
# take it out of manual mode.
# This is the less draconian version of remove_trigger. Hopefully people will
# be so annoyed they fix it themselves instead of having the carpet yanked out
# from under them.
{
  vars:
    "msg" string => "'Pssssst..... Hey Lester. Pester Pester Pester. Get out of manual mode!!!!!!'";

  commands:
    "/bin/echo"
      args => "$(msg) | /usr/bin/wall",
      contain => in_shell,
      comment => "Blast the msg out on WALL in case Lester doesnt see reports";

  reports:
    cfengine::
      "$(msg)";
} 

bundle agent abortclasses_remove_trigger(file, years, months, days, hours, minutes, seconds)
# Example trigger action bundles
#
# Remove trigger file if older than specified time
#   Sometimes its useful to cutoff cowboy mode so that someone doesnt forget. 
#   Note: this can help you solve people problems, it might also create some :)
{
  files:
      "$(file)"
        delete => tidy,
        touch => "true",
        classes => abortclasses_if_repaired_failed("cleared_trigger_file", "failed_clear_trigger_file");

  reports:
    debug::
    "$(this.bundle): IN abortclasses_remove_trigger";
    # These probably need to be unique classes
    cleared_trigger_file::
      "$(this.bundle): $(file) was removed because it was older than $(years) years, $(months) months, $(days) days, $(hours) hours, $(minutes) minutes, and $(seconds) seconds";

    failed_clear_trigger_file::
      "$(this.bundle): I was unable to remove $(file), I tried because it was older than $(years) years, $(months) months, $(days) days, $(hours) hours, $(minutes) minutes, and $(seconds) seconds";
}



####################################
