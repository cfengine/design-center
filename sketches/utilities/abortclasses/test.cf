body agent control
{
      abortclasses => { "cowboy" };
}

body common control
{
      bundlesequence => { "cfsketch_run" };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "../../utilities/abortclasses/main.cf" };

      # array 'metadata' from definition sketch metadata, activation __001_Utilities_abortclasses_abortclasses_filebased
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[authors]" slist => { "Ben Heilman <bheilman@enova.com>", "Nick Anderson <nick@cmdln.org>", "Ted Zlatanov <tzz@lifelogs.com>" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[license]" string => "MIT";
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/utilities/abortclasses";
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[manifest]" slist => { "README.md", "changelog", "main.cf", "params/example.json", "test.cf" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[manifest_cf]" slist => { "main.cf", "test.cf" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[manifest_docs]" slist => { "README.md" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[manifest_exe]" slist => { "cf_null" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[manifest_extra]" slist => { "changelog", "params/example.json" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[name]" string => "Utilities::abortclasses";
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[tags]" slist => { "cfdc" };
      "__001_Utilities_abortclasses_abortclasses_filebased_metadata[version]" string => "1.7";

      # array 'timeout' from definition /home/tzz/source/design-center/tools/test/../../sketches/utilities/abortclasses/params/test_timeout_action.json, activation __001_Utilities_abortclasses_abortclasses_filebased
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[action]" string => "abortclasses_pester_lester";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[days]" string => "";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[enabled]" string => "";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[hours]" string => "";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[minutes]" string => "2";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[months]" string => "";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[seconds]" string => "";
      "__001_Utilities_abortclasses_abortclasses_filebased_timeout[years]" string => "";
}

bundle agent cfsketch_run
{
  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "__001_Utilities_abortclasses_abortclasses_filebased" usebundle => abortclasses_filebased("cf_sketch_testing", "default:cfsketch_g.__001_Utilities_abortclasses_abortclasses_filebased_metadata", "cowboy", "/tmp/COWBOY", "", "any", "default:cfsketch_g.__001_Utilities_abortclasses_abortclasses_filebased_timeout"), useresult => "return___001_Utilities_abortclasses_abortclasses_filebased";

  reports:
    cfengine::

}
