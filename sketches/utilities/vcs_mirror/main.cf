bundle agent vcs_mirror(prefix)
{
  vars:
      "canon_prefix" string => canonify("$(prefix)");

      # disabled due to https://cfengine.com/bugtracker/view.php?id=718
      # for now use $($(prefix)bundle_home), which see in
      # the bundle meta_vcs_mirror below

      # "bundle_home"  string => dirname("$(this.promise_filename)"),
      # policy => "overridable";

    use_git::
      # TODO: extend this to support multiple VCSs
      "vcs_update_command" slist =>
      {
        @(git_update_command)
      },
      policy => "overridable";

      "vcs_mirror_command" slist =>
      {
        @(git_mirror_command)
      },
      policy => "overridable";

      "vcs_configfile" string => "$(git_configfile)",
      policy => "overridable";

    any::
      "git_update_command" slist =>
      {
        # Remove untracked files
        "$($(prefix)vcs) clean -f -f -x -q -d .",
        # Discard changes to index and working tree since HEAD
        "$($(prefix)vcs) reset -q --hard HEAD",
        # Check out the proper branch
        "$($(prefix)vcs) checkout -q $($(prefix)branch)",
        # Pull the latest changes from origin
        "$($(prefix)vcs) pull -q -s recursive -Xtheirs origin $($(prefix)branch)",
        # Reset the working tree to the latest updates
        "$($(prefix)vcs) reset -q --hard HEAD",
      };

      "git_mirror_command" slist =>
      {
        # clone the given repository with Git
        "$($(prefix)vcs) clone -b $($(prefix)branch) $($(prefix)origin) $($(prefix)path)"
      };

      "git_configfile" string => "$($(prefix)path)/.git/config";

  classes:
      # test if the last component of the "vcs" path arg matches a known VCS
      # TODO: use_git and known_vcs are global, so you can't mix VCSs in one run!!!
      "use_git" expression => strcmp(lastnode("$($(prefix)vcs)","/"), "git");
      "known_vcs" or => { "use_git" };
      "$(canon_prefix)path_exists" expression => fileexists("$($(prefix)path)");

      "$(canon_prefix)runas_current_user" expression => strcmp("$($(prefix)runas)", getenv("USER", 128));
      # I can't use vcs_configfile here because it doesn't converge soon enough
      use_git::
      "$(canon_prefix)vcsconfig_exists" expression => fileexists("$(git_configfile)");

  files:
    use_git::
      "$(git_configfile)"
      handle => "vcs_configfile_contents",
      comment => "Expand Git config file from template",
      create => "false",
      edit_defaults => empty,
      ifvarclass => "$(canon_prefix)vcsconfig_exists",
      edit_line => expand_template("$($(prefix)bundle_home)/files/gitconfig.template");

  commands:

    known_vcs::
      # We only need to perform cleanup operations if we did not do a
      # fresh new clone
      "$(vcs_update_command)"
      handle     => "vcs_update_command",
      contain    => umask_in_dir("$($(prefix)path)", "$($(prefix)umask)"),
      ifvarclass => "$(canon_prefix)runas_current_user.$(canon_prefix)vcsconfig_exists.!$(canon_prefix)vcs_mirrored",
      comment    => "Update an existing VCS repository in $($(prefix)path), no user override";

      "$(vcs_update_command)"
      handle     => "vcs_update_with_user_command",
      contain    => setuid_umask_in_dir("$($(prefix)runas)", "$($(prefix)path)", "$($(prefix)umask)"),
      ifvarclass => "!$(canon_prefix)runas_current_user.$(canon_prefix)vcsconfig_exists.!$(canon_prefix)vcs_mirrored",
      comment    => "Update an existing VCS repository in $($(prefix)path), user override to $($(prefix)runas)";

      "$(vcs_mirror_command)"
      handle     => "vcs_mirror_command",
      contain    => umask_in_dir("/", "$($(prefix)umask)"),
      ifvarclass => "$(canon_prefix)runas_current_user.!$(canon_prefix)vcsconfig_exists.!$(canon_prefix)vcs_mirrored",
      classes    => if_ok("$(canon_prefix)vcs_mirrored"),
      comment    => "Clone a VCS repository in $($(prefix)path), no user override";

      "$(vcs_mirror_command)"
      handle     => "vcs_mirror_with_user_command",
      contain    => setuid_umask_in_dir("$($(prefix)runas)", "/", "$($(prefix)umask)"),
      ifvarclass => "!$(canon_prefix)runas_current_user.!$(canon_prefix)vcsconfig_exists.!$(canon_prefix)vcs_mirrored",
      classes    => if_ok("$(canon_prefix)vcs_mirrored"),
      comment    => "Clone a VCS repository in $($(prefix)path), user override to $($(prefix)runas)";

  reports:
    cfengine::
      "VCS is $($(prefix)vcs), origin $($(prefix)origin), branch $($(prefix)branch), target path $($(prefix)path).  We'll load the templates from $($(prefix)bundle_home)."
      ifvarclass => "$(canon_prefix)runas_current_user";

      "VCS is $($(prefix)vcs), to be executed as user $($(prefix)runas), origin $($(prefix)origin), branch $($(prefix)branch), target path $($(prefix)path).  We'll load the templates from $($(prefix)bundle_home)."
      ifvarclass => "!$(canon_prefix)runas_current_user";


      "Cool, we're using Git."
      ifvarclass => "use_git";

    !known_vcs::
      "Sorry, the requested VCS $($(prefix)vcs) is not handled yet.";

    known_vcs::
      "$($(prefix)vcs) is known.  We will look for the config file $(vcs_configfile)";

      "VCS config file $(vcs_configfile) exists"
      ifvarclass => "$(canon_prefix)vcsconfig_exists.!$(canon_prefix)vcs_mirrored";

      "VCS config file $(vcs_configfile) does not exist"
      ifvarclass => "!$(canon_prefix)vcsconfig_exists";

      "Sorry, we could not clone $($(prefix)origin) (branch $($(prefix)branch)) in $($(prefix)path) because that path already exists"
      ifvarclass => "$(canon_prefix)path_exists.!$(canon_prefix)vcsconfig_exists";

      "New clone of $($(prefix)origin) (branch $($(prefix)branch)) created in $($(prefix)path)"
      ifvarclass => "$(canon_prefix)vcs_mirrored";

}

body contain setuid_umask_in_dir(user, dir, umask)
{
      chdir => "$(dir)";
      exec_owner => "$(user)";
      umask => "$(umask)";
}

body contain umask_in_dir(dir, umask)
{
      chdir => "$(dir)";
      umask => "$(umask)";
}

bundle agent meta_vcs_mirror
{
  vars:
      # acceptable values: "/usr/bin/git" for example
      "optional_argument[vcs]" string => "string";
      "default[vcs]"           string => "/usr/bin/git";

      "argument[path]"   string => "string";
      "argument[origin]" string => "string";
      "argument[branch]" string => "string";

      # this is not called "user" so it won't be confused with the remote user
      "optional_argument[runas]" string => "string";
      # as far as I know 128 is more than enough on any OS
      "default[runas]"           string => getenv("USER", 128);

      # this changes the umask from the default 077
      "optional_argument[umask]" string => "string";
      "default[umask]"           string => "077";

      # this can't be determined from within the bundle due to:
      # https://cfengine.com/bugtracker/view.php?id=718
      "optional_argument[bundle_home]" string => "string";
      # this default will probably be incorrect, either use cfsketch --generate
      # or supply it yourself
      "default[bundle_home]"           string => dirname("$(this.promise_filename)");
}
