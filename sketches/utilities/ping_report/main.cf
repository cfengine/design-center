body file control
{
      namespace => "cfdc_ping";
}

bundle agent ping(runenv, metadata, hosts, count)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "ping_count_option" string => "-c";

      "reached[$(hosts)]"
      string => "1",
      ifvarclass => canonify("$(hosts)_ok");

      "not_reached[$(hosts)]"
      string => "1",
      ifvarclass => canonify("$(hosts)_not_ok");

      "status[$(hosts)]"
      string => "1",
      ifvarclass => canonify("$(hosts)_ok");

      "status[$(hosts)]"
      string => "0",
      ifvarclass => canonify("$(hosts)_not_ok");

      "reached_hosts" slist => getindices("reached");
      "not_reached_hosts" slist => getindices("not_reached");

      # "reached_str" string => join(" ", "reached_hosts");
      "reached_str" string => "reached_str should be generated but isn't; TODO: look into it";
      "not_reached_str" string => join(" ", "not_reached_hosts");

    not_test::
      "exec_prefix" string => "", policy => "free";
    test::
      "exec_prefix" string => "/bin/echo ", policy => "free";

    any::
      "pinger" string => "$(exec_prefix)$(default:paths.path[ping])", policy => "free";

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  commands:
      "$(pinger)"
      args => "$(ping_count_option) $(count) $(hosts)",
      contain => default:silent,
      classes => default:classes_generic("$(hosts)");

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    cfengine::
      "$(reached_str)" bundle_return_value_index => "reached";
      "$(not_reached_str)" bundle_return_value_index => "not_reached";

      "$(this.bundle): I am able to ping $(hosts)",
      ifvarclass => canonify("$(hosts)_ok");

      "$(this.bundle): I am unable to ping $(hosts)",
      ifvarclass => canonify("$(hosts)_not_ok");
}
