body common control
{
      bundlesequence => { "cfsketch_run" };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "main.cf" };

      # array 'metadata' from definition sketch metadata, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_metadata[authors]" slist => { "Nick Anderson <nick@cmdln.org>", "Jean Remond <cfengine@remond.re>", "Ted Zlatanov <tzz@lifelogs.com>" };
      "__001_System_config_resolver_resolver_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "__001_System_config_resolver_resolver_metadata[license]" string => "MIT";
      "__001_System_config_resolver_resolver_metadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/system/config_resolver";
      "__001_System_config_resolver_resolver_metadata[manifest]" slist => { "README.md", "main.cf", "params/example.json" };
      "__001_System_config_resolver_resolver_metadata[manifest_cf]" slist => { "main.cf" };
      "__001_System_config_resolver_resolver_metadata[manifest_docs]" slist => { "README.md" };
      "__001_System_config_resolver_resolver_metadata[manifest_exe]" slist => { "cf_null" };
      "__001_System_config_resolver_resolver_metadata[manifest_extra]" slist => { "params/example.json" };
      "__001_System_config_resolver_resolver_metadata[name]" string => "System::config_resolver";
      "__001_System_config_resolver_resolver_metadata[tags]" slist => { "cfdc" };
      "__001_System_config_resolver_resolver_metadata[version]" string => "1.1";

      # list 'nameserver' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_nameserver" slist => { "8.8.8.8", "8.8.4.4" };

      # list 'search' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_search" slist => { "example.net", "example.org" };

      # list 'domain' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_domain" slist => { "example.com" };

      # list 'options' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_options" slist => { "ndots:1", "timeout:5", "attempts:2", "rotate", "no-check-names", "inet6", "ip6-bytestring", "edns0", "ip6-dotint", "no-ip6-dotint" };

      # list 'sortlist' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_sortlist" slist => { "130.155.160.0/255.255.240.0", "130.155.0.0" };

      # list 'extra' from definition /home/tzz/source/design-center/tools/test/../../sketches/system/config_resolver/params/example.json, activation __001_System_config_resolver_resolver
      "__001_System_config_resolver_resolver_extra" slist => { "# this file is edited by CFEngine", "# you could put any options here", "# even write the whole file
# as you can see, even multiline strings", "# but that would be uncivilized" };
}

bundle agent cfsketch_run
{
  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "__001_System_config_resolver_resolver" usebundle => cfdc_resolver:resolver("cf_sketch_testing", "default:cfsketch_g.__001_System_config_resolver_resolver_metadata", "/tmp/resolv.conf", @(cfsketch_g.__001_System_config_resolver_resolver_nameserver), @(cfsketch_g.__001_System_config_resolver_resolver_search), @(cfsketch_g.__001_System_config_resolver_resolver_domain), @(cfsketch_g.__001_System_config_resolver_resolver_options), @(cfsketch_g.__001_System_config_resolver_resolver_sortlist), @(cfsketch_g.__001_System_config_resolver_resolver_extra)), useresult => "return___001_System_config_resolver_resolver";

  reports:
    cfengine::
      "activation __001_System_config_resolver_resolver returned resolv_conf = $(return___001_System_config_resolver_resolver[resolv_conf])";
}
