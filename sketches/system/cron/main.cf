body file control
{
      namespace => "cfdc_cron";
}

bundle agent d(runenv, metadata, cron_path, file_task, runas, when, commands)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "lines" slist  => maplist("#managed by cfengine cron sketch$(const.endl)$(when) $(runas) $(this)", "commands");

      "r_cron_path" string => "$(default:eu.path_prefix)$(cron_path)";

    any::
      "toedit" string => "$(r_cron_path)/cron-sketch-$(file_task)",
      policy => "free";

      "class_toedit" string => canonify($(toedit)),
      policy => "free";

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(toedit)"
      edit_line => default:append_if_no_lines($(lines)),
      edit_defaults => default:empty,
      create => "true",
      classes => default:if_ok($(class_toedit));

  reports:
    test::
      "$(this.bundle): running in test mode";
    verbose::
      "$(this.bundle): running in verbose mode";

    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      "$(this.bundle): Activating '$(toedit)': run as $(runas) at times '$(when)', command '$(commands)'";
      "$(this.bundle): lines to be inserted in '$(toedit)' = $(lines)";

    any::
      "$(file_task)" bundle_return_value_index => "tab";
      "$(r_cron_path)" bundle_return_value_index => "path";
}

bundle agent tab(runenv, metadata, cron_path, line_task, runas, when, commands)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";
      "need_user_specified" expression => strcmp("$(default:env.LOGNAME)",
                                                 $(runas));

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "marker" string => "MANAGED_BY_CFENGINE_CRON_SKETCH='$(line_task)'";
      "lines" slist  => maplist("$(when) $(marker) $(this)", "commands");
      "lines_str" string  => join($(const.n), "lines");

      "class_prefix" string => canonify("$(sys.date) $(cron_path)$(line_task)");
      "toedit" string => "/tmp/$(class_prefix).cron";

    need_user_specified::
      "crontab_options" string => "-u $(runas)";
    !need_user_specified::
      "crontab_options" string => "";

    not_test::
      "exec_prefix" string => "", policy => "free";
    test::
      "exec_prefix" string => "/bin/cat CRONTAB=", policy => "free";

  methods:
      "env" usebundle => default:env;

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      # 2) edit the crontab
      "$(toedit)"
      edit_line      => default:converge($(marker), $(lines_str)),
      edit_defaults  => default:std_defs,
      create         => "true",
      classes        => default:if_repaired("$(class_prefix)_edited"),
      ifvarclass     => "$(class_prefix)_prepared";

      # 4) clean out the temp file
      "$(toedit)"
      delete         => default:tidy,
      ifvarclass     => "$(class_prefix)_processed||$(class_prefix)_not_processed";

  commands:
      # 1) get the crontab
      "$(cron_path) $(crontab_options) -l > $(toedit)"
      contain        => default:in_shell,
      classes        => default:if_ok("$(class_prefix)_prepared");

      # 3) load the edited crontab from the temp file
      "$(exec_prefix)$(cron_path) $(crontab_options) $(toedit)"
      contain        => default:in_shell,
      classes        => default:if_else("$(class_prefix)_processed",
                                        "$(class_prefix)_not_processed"),
      ifvarclass     => "$(class_prefix)_edited";

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      "$(this.bundle): Activating '$(toedit)': run as $(runas) at times '$(when)', command '$(commands)'";
      "$(this.bundle): lines to be inserted in '$(toedit)' = $(lines)";

    any::
      "$(line_task)" bundle_return_value_index => "tab",
      ifvarclass => "$(class_prefix)_processed";

      "" bundle_return_value_index => "tab",
      ifvarclass => "$(class_prefix)_not_processed||!$(class_prefix)_processed";

      "$(cron_path)" bundle_return_value_index => "path";
}
