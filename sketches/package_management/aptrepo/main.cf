body file control
{
  namespace => "cfdc_aptrepo";
}

# Used for enforcing the contents of /etc/apt/sources.list or
# /etc/apt/sources.list.d/*.list

bundle agent ensure(runenv, metadata, given_file, url, distribution, components, types, options)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "CFEnotice"
      string  => "# This file is managed by CFEngine, manual edits will be reverted",
      comment => "It's nice to let people know why the file keep magically reverting on them";

      "components_str" string => join(" ", "components");

    !test::
      "file_prefix" string => "", policy => "free";
    test::
      "file_prefix" string => "/tmp", policy => "free";

    any::
      "file" string => "$(file_prefix)$(given_file)",
      policy => "free";

      "class_prefix" string => canonify($(file)),
      policy => "free";

      "entries" slist => maplist("$(this) $(options) $(url) $(distribution) $(components_str)", "types");

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(file)"
      create        => "true",
      handle        => "repo_prepfile",
      edit_defaults => default:std_defs,
      edit_line     => default:prepend_if_no_line($(CFEnotice)),
      classes       => default:generic("$(class_prefix)_prep"),
      comment       => "Create $(file) and note that the file is managed by CFEngine";

      # note that we need to edit the file AFTER it's been possibly
      # created with a notice
      "$(file)"
      edit_defaults =>  default:std_defs,
      edit_line     =>  default:append_if_no_line("$(entries)"),
      classes       => default:generic("$(class_prefix)_ensure"),
      comment       =>  "Complete or fix $(file).";

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      "$(this.bundle): file $(file); ensuring line $(entries)";

    any::
      "$(file)" bundle_return_value_index => "file",
      ifvarclass => canonify("$(class_prefix)_ensure_ok");

      "" bundle_return_value_index => "file",
      ifvarclass => canonify("$(class_prefix)_ensure_not_ok");
}

bundle agent wipe(runenv, metadata, wipe, given_file)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    !test::
      "file_prefix" string => "", policy => "free";
    test::
      "file_prefix" string => "/tmp", policy => "free";

    any::
      "file" string => "$(file_prefix)$(given_file)",
      policy => "free";

      "class_prefix" string => canonify($(file)),
      policy => "free";

  methods:
    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(file)"
      edit_defaults => default:empty,
      classes       => default:generic("$(class_prefix)_wipe"),
      comment       => "Wipe $(file)";

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

      "$(this.bundle): wiping file $(file)";

    any::
      "$(file)" bundle_return_value_index => "file";
}
