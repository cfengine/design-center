body file control
{
      namespace => "cfdc_yumclient";
}

bundle agent remove_file(runenv, metadata, remove_file)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "file" string => "$(default:eu.path_prefix)$(remove_file)",
      policy => "free";

      "class_prefix" string => canonify("$(this.bundle) $(file)"),
      policy => "free";

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(file)"
      delete => default:tidy,
      classes => default:classes_generic($(class_prefix));

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    any::
      "$(file)" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_ok";

      "" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_not_ok";
}

bundle agent remove_section(runenv, metadata, given_file, remove_section)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

      "file_found" expression => fileexists($(file));
      "bundle_ok" or => { "!file_found", "$(class_prefix)_ok" };

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "file" string => "$(default:eu.path_prefix)$(given_file)",
      policy => "free";

      "class_prefix" string => canonify("$(this.bundle) $(file) $(remove_section)"),
      policy => "free";

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
    file_found::
      "$(file)"
      edit_line => edit_out_section($(remove_section)),
      classes => default:classes_generic($(class_prefix));

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    bundle_ok::
      "$(remove_section)" bundle_return_value_index => "section";
      "$(file)" bundle_return_value_index => "file";

    !bundle_ok::
      "" bundle_return_value_index => "section";
      "" bundle_return_value_index => "file";
}

bundle agent ensure_template(runenv, metadata, given_file, section, template_conf)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";
      "empty_given_file" expression => strcmp($(given_file), "");

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    not_test::
      "owner" string => "root", policy => "free";
    test::
      "owner" string => "$(default:env.LOGNAME)", policy => "free";

    empty_given_file::
      "checked_file" string => "/etc/yum.repos.d/$(section).repo",
      policy => "free";
    !empty_given_file::
      "checked_file" string => "$(given_file)",
      policy => "free";

    any::
      "file" string => "$(default:eu.path_prefix)$(checked_file)",
      policy => "free";

      "class_prefix" string => canonify("$(this.bundle) $(file) $(section) $(template_conf)"),
      policy => "free";

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(file)"
      create => "true",
      perms => default:mog("644", $(owner), $(owner)),
      edit_defaults => default:empty,
      handle => "ensure_template_overwrite",
      edit_line => default:insert_ini_section($(section), $(template_conf)),
      classes => default:classes_generic($(class_prefix));

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    any::
      "$(section)" bundle_return_value_index => "section",
      ifvarclass => "$(class_prefix)_ok";

      "$(file)" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_ok";

      "" bundle_return_value_index => "section",
      ifvarclass => "$(class_prefix)_not_ok";

      "" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_not_ok";
}

bundle agent ensure(runenv, metadata, given_file, section, conf)
{
  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

    not_test::
      "owner" string => "root", policy => "free";
    test::
      "owner" string => "$(default:env.LOGNAME)", policy => "free";

    any::
      "file" string => "$(default:eu.path_prefix)$(given_file)",
      policy => "free";

      "class_prefix" string => canonify("$(this.bundle) $(file) $(section) $(conf)"),
      policy => "free";

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      "$(file)"
      create => "true",
      perms => default:mog("644", $(owner), $(owner)),
      edit_defaults => default:no_backup,
      handle => "ensure_eof_present",
      edit_line => default:append_if_no_line("[#EOF#]"),
      comment => "This is to work around an old bug that caused
region selection to fail because EOF was not
detected as end of region",
      classes => default:classes_generic("$(class_prefix)_prep");

      "$(file)"
      edit_defaults => default:no_backup,
      handle => "ensure_present",
      edit_line => cfdc_yumclient:manage_variable_values_ini($(conf),
                                                             $(section)),
      classes => default:classes_generic($(class_prefix)),
      depends_on => { "ensure_eof_present" };

  reports:
    verbose::
      "$(this.bundle): imported environment '$(runenv)' var '$(vars)' with value '$($(vars))'";
      "$(this.bundle): imported environment '$(runenv)' class '$(vars)' because 'default:runenv_$(runenv)_$(vars)' was defined"
      ifvarclass => "$(vars)";

    any::
      "$(section)" bundle_return_value_index => "section",
      ifvarclass => "$(class_prefix)_ok";

      "$(file)" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_ok";

      "" bundle_return_value_index => "section",
      ifvarclass => "$(class_prefix)_not_ok";

      "" bundle_return_value_index => "file",
      ifvarclass => "$(class_prefix)_not_ok";
}

bundle edit_line manage_variable_values_ini(tab, section)
# Sets the RHS of configuration items in the file of the form
# LHS=RHS
# If the line is commented out with #, it gets uncommented first.
# Adds a new line if none exists.
# Removes any variable value pairs not defined for the ini section
# The argument is an associative array containing tab[SectionName][LHS]="RHS"
# don't change value when the RHS is dontchange

# Based on set_variable_values_ini
# Added delete lines section to empty out undefined variable values for INI section

# CAUTION : REQUIRES CFEngine 3.4.0
{
  classes:
      "_debug_repo_yum_client" or => { "default:debug" };

  vars:
      "index" slist => { getindices($(tab)) },
      policy => "free";

      # Be careful if the index string contains funny chars
      "cindex[$(index)]" string => canonify("$(index)");

  classes:
      "noedit_$(cindex[$(index)])" expression => strcmp("$($(tab)[$(index)])","dontchange"),
      comment => "Create conditions to make changes";

      "section_exists"
      expression => regline(".*[$(section)].*", "$(edit.filename)");

  field_edits:
    section_exists::
      # If the line is there, but commented out, first uncomment it
      "#+$(index)\s*=.*"
      select_region => default:INI_section("$(section)"),
      edit_field => default:col("=","1","$(index)","set"),
      ifvarclass => "!noedit_$(cindex[$(index)])";

      # match a line starting like the key something
      "$(index)\s*=.*"
      edit_field => default:col("=","2","$($(tab)[$(index)])","set"),
      select_region => default:INI_section("$(section)"),
      classes => default:if_ok("ini_not_$(cindex[$(index)])"),
      ifvarclass => "!noedit_$(cindex[$(index)])";

  delete_lines:
    section_exists::
      ".*"
      select_region => default:INI_section("$(section)"),
      comment       => "Remove all entries in the region so there are no extra entries";

  insert_lines:
      "[$(section)]"
      location => default:start,
      #classes => default:if_ok("yumclient_manage_variable_values_ini_$(section)_exists"),
      comment => "Insert lines";

    section_exists::
      "$(index)=$($(tab)[$(index)])"
      select_region => default:INI_section("$(section)"),
      ifvarclass => "!ini_not_$(cindex[$(index)]).!noedit_$(cindex[$(index)])";

  reports:
    _debug_repo_yum_client::
      "DEBUG Managing INI $(tab) $(section); $(index) = $($(tab)[$(index)])";

      "DEBUG We will not edit setting $(index)"
      ifvarclass => "noedit_$(cindex[$(index)])";

      "DEBUG We will edit setting $(index)"
      ifvarclass => "!noedit_$(cindex[$(index)])";

    section_exists._debug_repo_yum_client::
      "DEBUG section $(section) exists";

    !section_exists._debug_repo_yum_client::
      "DEBUG section $(section) does not exist";

}

bundle edit_line edit_out_section(section)
{
  classes:
      "section_exists" expression => regline(".*[$(section)].*",
                                             "$(edit.filename)");

  delete_lines:
    section_exists::
      ".*"
      select_region => default:INI_section("$(section)"),
      comment       => "Remove all entries in the region so there are no extra entries";
}
