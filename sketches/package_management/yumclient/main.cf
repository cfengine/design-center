bundle agent repo_yum_client(prefix)
# Configure yum repository clients
# repo[identifier][variable]
# repo[identifier][name] string => optional
# repo[identifier][baseurl] string =>  required
# repo[identifier][enabled] string => optional 
# repo[identifier][gpgcheck] string => optional
# mgmt_policy string => "ensure_present|ensure_absent"
# empty_section string => "yes|true"
{
vars:
  "repo_ids" slist => getindices("$(prefix)repo");

classes:
  "_debug_repo_yum_client" expression => regcmp("(?i)yes|true|on", "$($(prefix)debug)");

methods:
  "Yum Repository Client Configuration"
    usebundle => repo_yum_client_config("$(prefix)repo", "$(repo_ids)", "$($(prefix)debug)", "$($(prefix)mgmt_policy)", "$($(prefix)empty_section)", "$(prefix)reposdir"),
    comment => "Configure yum client for each repository";

}
bundle agent meta_repo_yum_client
{
vars:
  "argument[repo]" string => "array";
  
  "optional_argument[mgmt_policy]" string => "string";
  "default[mgmt_policy]" string => "ensure_present";
  
  "optional_argument[debug]" string => "string";
  "default[debug]" string => "false";

  "optional_argument[empty_section]" string => "string";
  "default[empty_section]" string => "false";
}

bundle agent repo_yum_client_config(arrayname, first_index, debug, mgmt_policy, empty_section, reposdir)
# This allows us to have dynamic second index on the repo array
# It does mean that this bundle must be activated for each repository
# but it seems better than the alternative of knowing all possible options
# to in the config when there are so many yum plugins possible.
{
vars:
  "bundle" string => "repo_yum_client_config";
  "variables" slist => getindices("$(arrayname)[$(first_index)]");
  #"$(first_index)[$(first_index)][$(variables)]" string => "$($(arrayname)[$(first_index)][$(variables)])";

  "valid_mgmt_policies" slist => { "ensure_present", "ensure_absent" };

  !reposdir_from_parameter::
    "my_reposdir"
      string => "/etc/yum.repos.d",
      policy => "free";
  
  reposdir_from_parameter::
    "my_reposdir"
      string => "$($(reposdir))",
      policy => "free";
  
classes:
  "_debug_repo_yum_client" expression => regcmp("(?i)yes|true|on", "$(debug)");
  "mgmt_policy_from_parameter" expression => regcmp("(?i)$(valid_mgmt_policies)", "$(mgmt_policy)");
  "empty_section_from_parameter" expression => regcmp("(?i)true|yes", "$(empty_section)");
  "reposdir_from_parameter" expression => isvariable("$(reposdir)");

  "baseurl_defined" expression => isvariable("$(arrayname)[$(first_index)][baseurl]");

  "mgmt_policy_$(valid_mgmt_policies)" 
    expression => regcmp("(?i)$(valid_mgmt_policies)", "$(mgmt_policy)"),
    ifvarclass => "mgmt_policy_from_parameter";

  # Default managment policy to ensure present
  "mgmt_policy_ensure_present"
    or => {"any"},
    ifvarclass => not("mgmt_policy_ensure_absent");

files:
  mgmt_policy_ensure_present::
    "$(my_reposdir)/$(first_index).repo"
      create => "true",
      perms => mog("644", "root", "root"),
      edit_line => append_if_no_line("[#EOF#]"),
      comment => "This is to work around an old bug that caused
                  region selection to fail because EOF was not 
                  detected as end of region";
  
    "$(my_reposdir)/$(first_index).repo"
      create => "true",
      perms => mog("644", "root", "root"),
      edit_defaults => no_backup,
      handle => "$(bundle)_files_$(first_index)_ensure_present",
      edit_line => yumclient_set_variable_values_ini("$(arrayname)", "$(first_index)"),
      ifvarclass => not("empty_section_from_parameter");
     
    "$(my_reposdir)/$(first_index).repo"
      create => "true",
      perms => mog("644", "root", "root"),
      handle => "$(bundle)_files_$(first_index)_ensure_present_empty_section",
      edit_line => yumclient_manage_variable_values_ini("$(arrayname)", "$(first_index)"),
      ifvarclass => "empty_section_from_parameter";

  mgmt_policy_ensure_absent::
    "$(my_reposdir)/$(first_index).repo"
      delete => tidy,
      comment => "When the mgmt_policy is set to ensure_absent we just nuke the repofile";
 
reports:
  _debug_repo_yum_client::
    "DEBUG $(bundle)  $(first_index) $(variables)=$($(arrayname)[$(first_index)][$(variables)])";
    "DEBUG $(bundle)  mgmt_policy: $(valid_mgmt_policies)",
      ifvarclass => canonify("mgmt_policy_$(valid_mgmt_policies)");

    "DEBUG $(bundle)  empty_section: default false",
      ifvarclass => not("empty_section_from_parameter");

    "DEBUG $(bundle)  empty_section: $(empty_section)",
      ifvarclass => "empty_section_from_parameter";

    "DEBUG $(bundle)  required baseurl defined",
      ifvarclass => "baseurl_defined";

    "DEBUG $(bundle)  No action should be taken, baseurl not defined",
      ifvarclass => not("baseurl_defined");

    "DEBUG $(bundle)  reposdir: $(my_reposdir)";
}

bundle edit_line yumclient_manage_variable_values_ini(tab, sectionName) 
# Sets the RHS of configuration items in the file of the form
# LHS=RHS
# If the line is commented out with #, it gets uncommented first.
# Adds a new line if none exists.
# Removes any variable value pairs not defined for the ini section
# The argument is an associative array containing tab[SectionName][LHS]="RHS"
# don't change value when the RHS is dontchange

# Based on set_variable_values_ini 
# Added delete lines section to empty out undefined variable values for INI section

# CAUTION : for it to work nicely, you should use Cfengine with the commit n°3229
# otherwise you may risk a segfault

#
# If you are running 3.2.1 or earlier or more specifically git commit # or
# earlier you can use this to work around the segfault bug.
# vars:
#     "$(file)"
#         edit_line => append_if_no_line("[#EOF#]"),
#         create => "true",
#         comment => "Work around bug<bug#here> where eof did not mean end
#                     of section and thus cannot select a region. This promise
#                     should be placed before your call to this bundle";
#      "$(file)"
#         edit_line   => yumclient_manage_variable_values_ini("context.array", "SectionName"),
#         create => "true",
#         comment     => "Set the variale values only in the specified ini region";
# 
{
vars:
  "index" slist => getindices("$(tab)[$(sectionName)]");

  # Be careful if the index string contains funny chars
  "cindex[$(index)]" string => canonify("$(index)");

classes:
  "edit_$(cindex[$(index)])"     not => strcmp("$($(tab)[$(sectionName)][$(index)])","dontchange"),
                               comment => "Create conditions to make changes"; 

  "yumclient_manage_variable_values_ini_$(sectionName)_exists"
    expression => regline(".*[$(sectionName)].*", "$(edit.filename)");

field_edits:

  # If the line is there, but commented out, first uncomment it
  "#+$(index)\s*=.*"
    select_region => INI_section("$(sectionName)"),
    edit_field => col("=","1","$(index)","set"),
    ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

  # match a line starting like the key something
  "$(index)\s*=.*"
    edit_field => col("=","2","$($(tab)[$(sectionName)][$(index)])","set"),
    select_region => INI_section("$(sectionName)"),
    classes => if_ok("yumclient_manage_variable_values_ini_not_$(cindex[$(index)])"),
    ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

delete_lines:
  ".*"
    select_region => INI_section("$(sectionName)"),
    ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists",
    comment       => "Remove all entries in the region so there are no extra entries";

insert_lines:
  "[$(sectionName)]"
    location => start,
    #classes => if_ok("yumclient_manage_variable_values_ini_$(sectionName)_exists"),
    comment => "Insert lines";

  "$(index)=$($(tab)[$(sectionName)][$(index)])",
    select_region => INI_section("$(sectionName)"),
    ifvarclass => "!yumclient_manage_variable_values_ini_not_$(cindex[$(index)]).edit_$(cindex[$(index)]).yumclient_manage_variable_values_ini_$(sectionName)_exists";
}

bundle edit_line yumclient_set_variable_values_ini(tab, sectionName) 
# Sets the RHS of configuration items in the file of the form
# LHS=RHS
# If the line is commented out with #, it gets uncommented first.
# Adds a new line if none exists.
# Removes any variable value pairs not defined for the ini section
# The argument is an associative array containing tab[SectionName][LHS]="RHS"
# don't change value when the RHS is dontchange

# Based on yumclient_set_variable_values_ini 

# CAUTION : for it to work nicely, you should use Cfengine with the commit n°3229
# otherwise you may risk a segfault

#
# If you are running 3.2.1 or earlier or more specifically git commit # or
# earlier you can use this to work around the segfault bug.
# vars:
#     "$(file)"
#         edit_line => append_if_no_line("[#EOF#]"),
#         create => "true",
#         comment => "Work around bug<bug#here> where eof did not mean end
#                     of section and thus cannot select a region. This promise
#                     should be placed before your call to this bundle";
#      "$(file)"
#         edit_line   => yumclient_set_variable_values_ini("context.array", "SectionName"),
#         create => "true",
#         comment     => "Set the variale values only in the specified ini region";
# 
{
vars:
  "index" slist => getindices("$(tab)[$(sectionName)]");

  # Be careful if the index string contains funny chars
  "cindex[$(index)]" string => canonify("$(index)");

classes:
  "edit_$(cindex[$(index)])"     not => strcmp("$($(tab)[$(sectionName)][$(index)])","dontchange"),
                               comment => "Create conditions to make changes"; 

  "yumclient_set_variable_values_ini_$(sectionName)_exists"
    expression => regline(".*[$(sectionName)].*", "$(edit.filename)");

field_edits:

  # If the line is there, but commented out, first uncomment it
  "#+$(index)\s*=.*"
    select_region => INI_section("$(sectionName)"),
    edit_field => col("=","1","$(index)","set"),
    ifvarclass => "yumclient_set_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

  # match a line starting like the key something
  "$(index)\s*=.*"
    edit_field => col("=","2","$($(tab)[$(sectionName)][$(index)])","set"),
    select_region => INI_section("$(sectionName)"),
    classes => if_ok("yumclient_set_variable_values_ini_not_$(cindex[$(index)])"),
    ifvarclass => "yumclient_set_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

insert_lines:
  "[$(sectionName)]"
    location => start,
    #classes => if_ok("yumclient_set_variable_values_ini_$(sectionName)_exists"),
    comment => "Insert lines";

  "$(index)=$($(tab)[$(sectionName)][$(index)])",
    select_region => INI_section("$(sectionName)"),
    ifvarclass => "!yumclient_set_variable_values_ini_not_$(cindex[$(index)]).edit_$(cindex[$(index)]).yumclient_set_variable_values_ini_$(sectionName)_exists";
}


