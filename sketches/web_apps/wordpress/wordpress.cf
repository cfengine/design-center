#!/var/cfengine/bin/cf-agent -KIf
#
# Author: Aleksey Tsalolikhin <atsaloli.tech@gmail.com>, Diego Zamboni <diego.zamboni@cfengine.com>
# OS: linux
# Tested: ubuntu
#

######################################################################
# Public entry points
######################################################################

# Make sure wordpress is installed and configured correctly.
# Mandatory parameters in the "params" array:
#   DB_NAME
#   DB_USER
#   DB_PASSWORD
#   _htmlroot
#   _wp_dir (final wordpress install directory)
bundle agent wp_install(prefix, wp_dir, wp_params, tarfile, downloadurl, htmlroot, packages, mysql_process, httpd_process, service_cmd, apache_srv, mysql_srv)
{
  meta:
      # __PREFIX__ will be supplied by cf-sketch
      "vars[prefix][type]"           string => "NON_EMPTY_STRING";
      "vars[prefix][default]"        string => "__PREFIX__";

      "vars[wp_dir][type]"                string => "PATH",
        comment => "Directory where wordpress will be installed";
      # Wordpress configuration parameters
      "vars[wp_params][type]"             string => "ARRAY()",
        comment => "Parameters to insert into Wordpress config file.";
      # General configuration parameters
      "vars[tarfile][type]"      string => "PATH",
        comment => "Where to store the downloaded wordpress tar file";
      "vars[tarfile][default]"                string => "/root/wordpress-latest.tar.gz";
      "vars[downloadurl][type]"  string => "HTTP_URL|FILE_URL",
        comment => "Download URL for the wordpress.tar.gz file";
      "vars[downloadurl][default]"            string => "http://wordpress.org/latest.tar.gz";

      # look in wordpress-base.json to see how we fill in system-specific
      # variables and paths per system we support
      "vars[htmlroot][type]"  string => "PATH";
      "vars[packages][type]"  string => "LIST(NON_EMPTY_STRING)";
      "vars[mysql_process][type]"  string => "NON_EMPTY_STRING";
      "vars[httpd_process][type]"  string => "NON_EMPTY_STRING";
      "vars[service_cmd][type]"  string => "PATH";
      "vars[apache_srv][type]"  string => "NON_EMPTY_STRING";
      "vars[mysql_srv][type]"  string => "NON_EMPTY_STRING";

  vars:
      "canon_prefix" string => canonify("$(prefix)");

  methods:
      "wp_vars"  usebundle => wp_vars("$(prefix)", "$(wp_dir)", "$(wp_params)", "$(tarfile)", "$(downloadurl)", "$(htmlroot)", @(wp_install.packages), "$(mysql_process)", "$(httpd_process)", "$(service_cmd)", "$(apache_srv)", "$(mysql_srv)"),
        classes => always("$(canon_prefix)prepared");
      "wp_debug" usebundle => wp_report_params("wp_vars.conf"),
        ifvarclass => "debug";
      "wp_pkgs"  usebundle => wp_packages_installed("wp_vars.conf");
      "wp_svcs"  usebundle => wp_services_up("wp_vars.conf");
      "wp_tar"   usebundle => wp_tarball_is_present("wp_vars.conf");
      "wp_xpnd"  usebundle => wp_tarball_is_unrolled("wp_vars.conf"); 
      "wp_mysql" usebundle => wp_mysql_configuration("wp_vars.conf", "$(prefix)wp_params"); 
      "wp_cfgcp" usebundle => wp_config_exists("wp_vars.conf");
      "wp_cfg"   usebundle => wp_is_properly_configured("wp_vars.conf", "$(prefix)wp_params");

}

#############################################

bundle agent wp_vars(prefix, wp_dir, wp_params, tarfile, downloadurl, htmlroot, packages, mysql_process, httpd_process, service_cmd, apache_srv, mysql_srv)
{
  vars:
      "class_prefix" string => lastnode("$(prefix)", "\."); # strip out the bundle prefix

      # Default configuration values. Internal parameters start with _
      "conf[_htmlroot]"     string => "$(htmlroot)";
      "conf[_wp_dir]"       string => "$(wp_dir)";
      "conf[_tarfile]"      string => "$(tarfile)";
      "conf[_downloadurl]"  string => "$(downloadurl)";
      "conf[_wp_config]"    string => "$(wp_dir)/wp-config.php";
      "conf[_wp_cfgsample]" string => "$(wp_dir)/wp-config-sample.php";
      "conf[_sys_servicecmd]" string => "$(service_cmd)";
      "conf[_sys_apachesrv]"  string => "$(apache_srv)";
      "conf[_httpd_process]"  string => "$(httpd_process)";
      "conf[_sys_mysqlsrv]"   string => "$(mysql_srv)";
      "conf[_mysql_process]"  string => "$(mysql_process)";
      "wp_packages"  slist => { @(packages) };

}

bundle agent wp_report_params(params)
{
  vars:
      "keys" slist => getindices("$(params)");
  reports:
    cfengine_3::
      "$(keys) = $($(params)[$(keys)])";
      "packages = $(wp_vars.wp_packages)";
}

bundle agent wp_packages_installed(params)
{
  vars:
      "pkgs" slist => { @(wp_vars.wp_packages) };
  packages:
      "$(pkgs)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

  reports:
    debug::
      "Checked that $(pkgs) is installed.";

  commands:
    packages_added::
      "$($(params)[_sys_servicecmd]) $($(params)[_sys_apachesrv]) graceful" 
        comment => "Restarting httpd so it can pick up new modules.";

}

#############################################

bundle agent wp_services_up(params)
{
  processes:
      "$($(params)[_mysql_process])" restart_class => "start_mysqld";
      "$($(params)[_httpd_process])"  restart_class => "start_httpd";

  commands:
    start_mysqld::
      "$($(params)[_sys_servicecmd]) $($(params)[_sys_mysqlsrv]) start";

    start_httpd::
      "$($(params)[_sys_servicecmd]) $($(params)[_sys_apachesrv]) start" ;
}

#############################################

bundle agent wp_tarball_is_present(params)
{
  classes:
      "wordpress_tarball_is_present" expression => fileexists("$($(params)[_tarfile])");

  commands:
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q -O $($(params)[_tarfile]) $($(params)[_downloadurl])"
        comment => "Downloading latest version of WordPress.";

  reports:
    wordpress_tarball_is_present.verbose::
      "WordPress tarball is on disk.";
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{
  classes:
      "wordpress_src_dir_is_present" expression => fileexists("$($(params)[_htmlroot])/wordpress");
      "wordpress_final_dir_is_present" expression => fileexists("$($(params)[_wp_dir])");

  reports:
    wordpress_final_dir_is_present.verbose::
      "WordPress directory is present.";

  commands:
    !wordpress_final_dir_is_present&!wordpress_src_dir_is_present::
      "/bin/tar -xzf $($(params)[_tarfile])"
        comment => "Unrolling wordpress tarball to $($(params)[_htmlroot])/wordpress.",
        contain => in_dir_shell("$($(params)[_htmlroot])");
    wordpress_src_dir_is_present&!wordpress_final_dir_is_present::
      "/bin/mv $($(params)[_htmlroot])/wordpress $($(params)[_wp_dir])"
        comment => "Rename unrolled directory into its final destination $($(params)[_wp_dir])";
}

#############################################

bundle agent wp_mysql_configuration(params, wpparams)
{
  commands:
      "/usr/bin/mysql -u root -e \"
      CREATE DATABASE IF NOT EXISTS $($(wpparams)[DB_NAME]);
      GRANT ALL PRIVILEGES ON $($(wpparams)[DB_NAME]).*
      TO '$($(wpparams)[DB_USER])'@localhost
      IDENTIFIED BY '$($(wpparams)[DB_PASSWORD])';
      FLUSH PRIVILEGES;\"
";
}

#############################################

bundle agent wp_config_exists(params)
{
  classes:
      "wordpress_config_file_exists"
        expression => fileexists("$($(params)[_wp_config])");

  files:
    !wordpress_config_file_exists::
      "$($(params)[_wp_config])"
        copy_from => backup_local_cp("$($(params)[_wp_cfgsample])"),
        perms => m("644");

  reports:
    wordpress_config_file_exists.verbose::
      "WordPress config file $($(params)[_wp_config]) is present";
    !wordpress_config_file_exists.verbose::
      "WordPress config file $($(params)[_wp_config]) is not present";
}

#############################################

bundle agent wp_is_properly_configured(params, wp_array)
{
  vars:
      "wpparams" slist => getindices("$(wp_array)");

  files:
      "$($(params)[_wp_config])"
        edit_line => replace_or_add("define\('$(wpparams)', *(?!'$($(wp_array)[$(wpparams)]))'.*",
				    "define('$(wpparams)', '$($(wp_array)[$(wpparams)])');"),
        perms => m("644");
}

#############################################

# This is not included in the standard method sequence called from wp_install because
# it has not been fully tested and is not something everyone would want to do. If
# you want it, add it specifically to your bundlesequence.

# bundle agent wp_allow_http_inbound(params)
# {
#   files:
#     redhat:: # tested on RHEL only, file location may vary based on Linux distro or OS
#       "/etc/sysconfig/iptables"
#         edit_line => wp_insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule,
#         comment => "insert HTTP allow rule into /etc/sysconfig/iptables",
#         classes => if_repaired("iptables_edited");

#   commands: 
#     iptables_edited::
#       "/sbin/service iptables restart"
#         comment => "Restarting iptables to load new config";
# }

# bundle edit_line wp_insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule(params)
# {
#   vars:
#       "http_rule" string => "-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT";

#   insert_lines:
#       "$(http_rule)"
#         location => wp_before_the_accept_established_tcp_conns_rule;
# }

# body location wp_before_the_accept_established_tcp_conns_rule
# {
#         before_after => "before";
#         first_last => "first";
#         select_line_matching => "^-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT.*";
# }

# Todo:
#
#
# MySQL:
# - submit a patch to the MySQL folks to add a non-interactive version of /usr/bin/mysql_secure_installation
# - secure mysql instance with a non-interactive version of /usr/bin/mysql_secure_installation once it is available
# - change the root password using /usr/bin/mysqladmin -u root password 'new-password'
# - secure mysql instance by: removing the test databases and anonymous user created by default
#
# httpd:
# - instead of hardcoding "/var/www/html", derive httpd document root on the fly from /etc/httpd/conf/httpd.conf
#   DocumentRoot using Function readstringlist
