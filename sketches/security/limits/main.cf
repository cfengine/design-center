body file control
{
      namespace => "cfdc_security";
}

bundle agent limits(runenv, metadata, given_filename, domains, empty_first, ensure_absent)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";

      "items" slist => { "core",
                         "data",
                         "fsize",
                         "memlock",
                         "nofile",
                         "rss",
                         "stack",
                         "cpu",
                         "nproc",
                         "as",
                         "maxlogins",
                         "maxsyslogins",
                         "priority",
                         "locks",
                         "sigpending",
                         "msqqueue",
                         "nice",
                         "rtprio",
                         "chroot",
      };

      "types" slist => { "soft", "hard", "-" };
      "mgmt_policies" slist => { "ensure_present", "ensure_absent" };

      "domain_keys" slist => { getindices("$(domains)") },
      policy => "free";

      "escaped[$(domain_keys)]" string => escape($(domain_keys));
      "escaped[$(types)]" string => escape($(types));

    test::
      "owner" string => getenv("LOGNAME", 100), policy => "free";
    not_test::
      "owner" string => "root", policy => "free";

    any::
      "filename" string => "$(default:eu.path_prefix)$(given_filename)";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";

      "empty_first" expression => strcmp($(empty_first), "1");
      "ensure_absent" expression => strcmp($(ensure_absent), "1");

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
    !empty_first.!ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_ensure_present",
      edit_line => cfdc_security:selective("add",
                                           $(domains),
                                           "cfdc_security:limits.escaped",
                                           @(limits.items),
                                           @(limits.types),
                                           @(limits.domain_keys)),
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("security_limits_repaired"),
      comment => "Ensure the specified lines are present, we dont care about other lines";

    empty_first.!ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_empty_first_ensure_present",
      edit_line => cfdc_security:selective("add",
                                           $(domains),
                                           @(limits.items),
                                           @(limits.types),
                                           @(limits.domain_keys)),
      edit_defaults => default:empty,
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("security_limits_repaired"),
      comment    => "Ensure only the specified lines exist.";

    ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_ensure_absent",
      edit_line => cfdc_security:selective("remove",
                                           $(domains),
                                           @(limits.items),
                                           @(limits.types),
                                           @(limits.domain_keys)),
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("security_limits_repaired"),
      comment    => "Ensure the specified lines do not exist.";

  reports:
    any::
      "$(filename)" bundle_return_value_index => "filename";

    test::
      "$(this.bundle): Security limits policy in test mode, managing domains $(domain_keys)";

    verbose.security_limits_repaired::
      "$(this.bundle): I repaired the $(filename) file";

    verbose.empty_first::
      "$(this.bundle): Empty First: enabled";

    verbose.!empty_first::
      "$(this.bundle): Empty First: disabled";

    verbose.ensure_absent::
      "$(this.bundle): Mgmt Policy: ensure absent";

    verbose.!ensure_absent::
      "$(this.bundle): Mgmt Policy: ensure present";

}

bundle edit_line selective(mode, dref, escaped_dref, items, types, dkeys)
{
  vars:
      "myitems" slist => { @(items) };
      "mytypes" slist => { @(types) };
      "mydkeys" slist => { @(dkeys) };

      "canonified[replace_done_$(edit.filename)_$(mydkeys)_$(mytypes)_$(myitems)]" string => canonify("replace_done_$(edit.filename)_$(mydkeys)_$(mytypes)_$(myitems)");
      "canonified[$(mydkeys)_$(mytypes)_$(myitems)_defined]" string => canonify("$(mydkeys)_$(mytypes)_$(myitems)_defined");

  classes:
      "removal" expression => strcmp("$(mode)", "remove");

      "$(canonified[$(mydkeys)_$(mytypes)_$(myitems)_defined])" expression => isvariable("$(dref)[$(mydkeys)][$(mytypes)][$(myitems)]");

  delete_lines:
      "^\s*$($(escaped_dref)[$(mydkeys)])\s+$($(escaped_dref)[$(mytypes)])\s+$(myitems).*$"
      ifvarclass => "$(canonified[$(mydkeys)_$(mytypes)_$(myitems)_defined])";

  insert_lines:
      "# This file is managed by CFEngine, manual edits may be reverted";

    !removal::
      "$(mydkeys) $(mytypes) $(myitems) $($(dref)[$(mydkeys)][$(mytypes)][$(myitems)])"
      ifvarclass => "$(canonified[$(mydkeys)_$(mytypes)_$(myitems)_defined])";

  reports:
    verbose.!removal::
      "$(this.bundle): invoked in rewrite mode";

    verbose.removal::
      "$(this.bundle): invoked in removal mode";

    verbose::

      "$(this.bundle): For setting '$(mydkeys) $(mytypes) $(myitems) = $($(dref)[$(mydkeys)][$(mytypes)][$(myitems)])', selectively managing line '^\s*$($(escaped_dref)[$(mydkeys)])\s+$($(escaped_dref)[$(mytypes)])\s+$(myitems).*$'"
      ifvarclass => "$(canonified[$(mydkeys)_$(mytypes)_$(myitems)_defined])";
}
