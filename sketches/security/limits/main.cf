body file control
{
      namespace => "cfdc_security_limits";
}

bundle agent limits(class_prefix, canon_prefix, filename, domains)
{
  meta:
      "vars[class_prefix][type]"      string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"   string => "__CLASS_PREFIX__";

      "vars[canon_prefix][type]"      string => "NON_EMPTY_STRING";
      "vars[canon_prefix][default]"   string => "__CANON_PREFIX__";

      "vars[ensure_absent][type]"     string => "CONTEXT";
      "vars[ensure_absent][default]"  string => "!any";

      "vars[empty_first][type]"       string => "CONTEXT";
      "vars[empty_first][default]"    string => "!any";

      "vars[debug][type]"             string => "CONTEXT";
      "vars[debug][default]"          string => "!any";

      "vars[test][type]"              string => "CONTEXT";
      "vars[test][default]"           string => "!any";

      "vars[verbose][type]"           string => "CONTEXT";
      "vars[verbose][default]"        string => "!any";

      "vars[filename][type]"          string => "PATH";
      "vars[filename][default]"       string => "/etc/security/limits.conf";

      "vars[domains][type]"           string => "ARRAY()";

  vars:
      "items" slist => { "core",
                         "data",
                         "fsize",
                         "memlock",
                         "nofile",
                         "rss",
                         "stack",
                         "cpu",
                         "nproc",
                         "as",
                         "maxlogins",
                         "maxsyslogins",
                         "priority",
                         "locks",
                         "sigpending",
                         "msqqueue",
                         "nice",
                         "rtprio",
                         "chroot",
                       };

      "types" slist => { "soft", "hard", "-" };
      "mgmt_policies" slist => { "ensure_present", "ensure_absent" };

      "domain_keys" slist => { getindices("$(domains)") },
      policy => "free";

      "escaped[$(domain_keys)]" string => escape($(domain_keys));
      "escaped[$(types)]" string => escape($(types));

    default:test::
      "owner" string => getenv("LOGNAME", 100);
    !default:test::
      "owner" string => "root";

  classes:
      "empty_first" expression => "$(class_prefix)empty_first";
      "ensure_absent" expression => "$(class_prefix)ensure_absent";

      "debug_security_limits" or => { "$(class_prefix)debug" };
      "verbose_security_limits" or => { "$(class_prefix)verbose" };
    default:debug::
      "debug_security_limits" or => { "any" };
    default:verbose::
      "verbose_security_limits" or => { "any" };

  files:
    !empty_first.!ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_ensure_present",
      edit_line => cfdc_security_limits:selective("add",
                                                  $(domains),
                                                  "cfdc_security_limits:limits.escaped",
                                                  @(limits.items),
                                                  @(limits.types),
                                                  @(limits.domain_keys)),
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(canon_prefix)repaired"),
      comment => "Ensure the specified lines are present, we dont care about other lines";

    empty_first.!ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_empty_first_ensure_present",
      edit_line => cfdc_security_limits:selective("add",
                                                  $(domains),
                                                  "cfdc_security_limits:limits.escaped",
                                                  @(limits.items),
                                                  @(limits.types),
                                                  @(limits.domain_keys)),
      edit_defaults => default:empty,
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired"),
      comment    => "Ensure only the specified lines exist.";

    ensure_absent::
      "$(filename)"
      create => "true",
      handle => "security_limits_files_limits_conf_ensure_absent",
      edit_line => cfdc_security_limits:selective("remove",
                                                  $(domains),
                                                  "cfdc_security_limits:limits.escaped",
                                                  @(limits.items),
                                                  @(limits.types),
                                                  @(limits.domain_keys)),
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired"),
      comment    => "Ensure the specified lines do not exist.";

  reports:
    debug_security_limits::
      "cfdc_security_limits: Security limits policy in debug mode, managing domains $(domain_keys)";

      "I repaired the $(filename) file",
      ifvarclass => "$(canon_prefix)repaired";

    empty_first::
      "Empty First: enabled";

    !empty_first::
      "Empty First: disabled";

    ensure_absent::
      "Mgmt Policy: ensure absent";

    !ensure_absent::
      "Mgmt Policy: ensure present";

}

bundle edit_line selective(mode, dref, escaped_dref, items, types, domains)
{
  vars:
      "myitems" slist => { @(items) };
      "mytypes" slist => { @(types) };
      "mydomains" slist => { @(domains) };

      "canonified[replace_done_$(edit.filename)_$(mydomains)_$(mytypes)_$(myitems)]" string => canonify("replace_done_$(edit.filename)_$(mydomains)_$(mytypes)_$(myitems)");
      "canonified[$(mydomains)_$(mytypes)_$(myitems)_defined]" string => canonify("$(mydomains)_$(mytypes)_$(myitems)_defined");

  classes:
      "removal" expression => strcmp("$(mode)", "remove");

      "$(canonified[$(mydomains)_$(mytypes)_$(myitems)_defined])" expression => isvariable("$(dref)[$(mydomains)][$(mytypes)][$(myitems)]");
    default:debug::
      "debug_security_limits" or => { "any" };

  delete_lines:
      "^\s*$($(escaped_dref)[$(mydomains)])\s+$($(escaped_dref)[$(mytypes)])\s+$(myitems).*$"
      ifvarclass => "$(canonified[$(mydomains)_$(mytypes)_$(myitems)_defined])";

  insert_lines:
      "# This file is managed by CFEngine, manual edits may be reverted";

    !removal::
      "$(mydomains) $(mytypes) $(myitems) $($(dref)[$(mydomains)][$(mytypes)][$(myitems)])"
      ifvarclass => "$(canonified[$(mydomains)_$(mytypes)_$(myitems)_defined])";

  reports:
    debug_security_limits.!removal::
      "cfdc_security_limits:selective: invoked in rewrite mode";

    debug_security_limits.removal::
      "cfdc_security_limits:selective: invoked in removal mode";

    debug_security_limits::

      "For setting '$(mydomains) $(mytypes) $(myitems) = $($(dref)[$(mydomains)][$(mytypes)][$(myitems)])', selectively managing line '^\s*$($(escaped_dref)[$(mydomains)])\s+$($(escaped_dref)[$(mytypes)])\s+$(myitems).*$'"
      ifvarclass => "$(canonified[$(mydomains)_$(mytypes)_$(myitems)_defined])";
}
