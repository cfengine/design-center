body file control
{
      namespace => "cfdc_tcpwrappers";
}

bundle agent set(runenv, metadata, given_allow_filename, given_deny_filename, allow, deny, empty_first, ensure_absent)
{
  vars:
      "vars" slist => { "@(default:$(runenv).env_vars)" };
      "$(vars)" string => "$(default:$(runenv).$(vars))";
      # Get lists of allow and deny rules based on the label
      "allow_rules" slist => getindices("$(allow)");
      "deny_rules"  slist => getindices("$(deny)");

      # Join list elements together to build rule daemon part
      "allowed_daemons_$(allow_rules)" string => join(",", "$(allow)[$(allow_rules)][daemons]");
      "denied_daemons_$(deny_rules)"   string => join(",", "$(deny)[$(deny_rules)][daemons]");

      # Join client list together to build rule client part
      # allow_sshd_all
      "allowed_clients_$(allow_rules)" string => join(",", "$(allow)[$(allow_rules)][clients]");
      "denied_clients_$(deny_rules)"   string => join(",", "$(deny)[$(deny_rules)][clients]");

      # Join list elements together to build rule options part
      "allowed_options_$(allow_rules)" string => join(" : ", "$(allow)[$(allow_rules)][options]");
      "denied_options_$(deny_rules)"   string => join(" : ", "$(deny)[$(deny_rules)][options]");

      ###########################################################################
      # Condense this down to 2 promises, and put them in an array so a         #
      # list can be grabbed using getvalues.                                    #
      ###########################################################################

      # Build allow rules that have optional parts
      "allow_rule[$(allow_rules)]"
      string => "$(allowed_daemons_$(allow_rules)) : $(allowed_clients_$(allow_rules)) : $(allowed_options_$(allow_rules))",
      policy => "free",
      ifvarclass => "allow_$(allow_rules)_has_options";

      # Build allow rules without optional parts
      "allow_rule[$(allow_rules)]"
      string => "$(allowed_daemons_$(allow_rules)) : $(allowed_clients_$(allow_rules))",
      policy => "free",
      ifvarclass => "!allow_$(allow_rules)_has_options";

      # Build deny rules that have optional parts
      "deny_rule[$(deny_rules)]"
      string => "$(denied_daemons_$(deny_rules)) : $(denied_clients_$(deny_rules)) : $(denied_options_$(deny_rules))",
      policy => "free",
      ifvarclass => "deny_$(deny_rules)_has_options";

      # Build allow rules without optional parts
      "deny_rule[$(deny_rules)]"
      string => "$(denied_daemons_$(deny_rules)) : $(denied_clients_$(deny_rules))",
      policy => "free",
      ifvarclass => "!deny_$(deny_rules)_has_options";

      # Build list of allow and deny rules from arrays.
      # The lists are needed for full file management.
      # This must be done on the second var pass since classes are needed
      # to build the arrays we are getting values from.
    first_class_pass::
      "allow_rule_list" slist => getvalues("allow_rule");
      "deny_rule_list"  slist => getvalues("deny_rule");

    test::
      "owner" string => getenv("LOGNAME", 100), policy => "free";
    not_test::
      "owner" string => "root", policy => "free";

    any::
      "allow_filename" string => "$(default:eu.path_prefix)$(given_allow_filename)";
      "deny_filename" string => "$(default:eu.path_prefix)$(given_deny_filename)";

  classes:
      "$(vars)" expression => "default:runenv_$(runenv)_$(vars)";
      "not_$(vars)" expression => "!default:runenv_$(runenv)_$(vars)";
    any::
      "ensure_absent" expression => strcmp($(ensure_absent), "1");
      "empty_first" expression => strcmp($(empty_first), "1");

      "allow_$(allow_rules)_has_options" expression => isvariable("$(allow)[$(allow_rules)][options]");
      "deny_$(deny_rules)_has_options"   expression => isvariable("$(deny)[$(deny_rules)][options]");

      # We need to know if we are on the second pass
      "second_class_pass" and => {"first_class_pass"};
      "first_class_pass" and => {"any"};

  methods:
      "utils" usebundle => default:eu($(runenv));

    verbose::
      "metadata" usebundle => default:report_metadata($(this.bundle), $(metadata)),
      inherit => "true";

  files:
      # This file edit must be done after the second pass of
      # vars for the access rule to have fully converged

      # If we are completely managing the file we should empty it first
      # This is the reccomended method of management
    second_class_pass.!ensure_absent.empty_first::
      "$(allow_filename)"
      handle => "$(bundle)_files_allow_complete",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_allow"),
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines($(allow_rule_list)),
      comment => "Completely managed hosts.allow leaves less room for
unexpected behavior from stray admins.";

      "$(deny_filename)"
      handle => "$(bundle)_files_deny_complete",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_deny"),
      ifvarclass => "empty_first",
      edit_line => default:append_if_no_lines($(deny_rule_list));

      # If we are only partially mangaging the file we can only promise
      # about the defined rules
    second_class_pass.!ensure_absent.!empty_first::
      "$(allow_filename)"
      handle => "$(bundle)_files_allow_partial",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_allow"),
      edit_line => default:append_if_no_lines($(allow_rule_list));

      "$(deny_filename)"
      handle => "$(bundle)_files_deny_partial",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_deny"),
      edit_line => default:append_if_no_lines($(deny_rule_list));

      # If we are managing removal we only ensure specific rules do not exist
    second_class_pass.ensure_absent::
      "$(allow_filename)"
      handle => "$(bundle)_files_allow_remove",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_allow"),
      edit_line => default:delete_lines_matching("^$(allow_rule_list)$");

      "$(deny_filename)"
      handle => "$(bundle)_files_deny_remove",
      create => "true",
      perms => default:mog("644", "$(owner)", "$(owner)"),
      classes => default:if_repaired("$(class_prefix)repaired_deny"),
      edit_line => default:delete_lines_matching("^$(deny_rule_list)$");

  reports:
    any::
      "$(allow_filename)" bundle_return_value_index => "allow_filename";
      "$(deny_filename)" bundle_return_value_index => "deny_filename";

    second_class_pass::
      # Report when files have been repaired
      "I repaired $(allow_filename)"
      ifvarclass => "$(class_prefix)repaired_allow";

      "I repaired $(deny_filename)"
      ifvarclass => "$(class_prefix)repaired_deny";

    debug_tcpwrappers.second_class_pass::
      # Allow and Deny Rules

      # Report File management policy
      "$(allow_filename) Should be emptied before editing."
      ifvarclass => "empty_first";

      "$(allow_filename) makes promises about specific rules being present"
      ifvarclass => "!ensure_absent";

      "$(allow_filename) makes promises about specific rules being absent"
      ifvarclass => "ensure_absent";

      "$(deny_filename) should be emptied before editing."
      ifvarclass => "empty_first";

      "$(deny_filename) makes promises about specific rules being present"
      ifvarclass => "!ensure_present";

      "$(deny_filename) makes promises about specific rules being absent"
      ifvarclass => "ensure_absent";


      # Report individual rules
      "ALLOW RULE for $(allow_rules) | $(allow_rule[$(allow_rules)])";

      "DENY RULE for $(deny_rules) | $(deny_rule[$(deny_rules)])";

      "ALL ALLOW RULES: $(allow_rule_list)";
      "ALL DENY RULES: $(deny_rule_list)";

}
