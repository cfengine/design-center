body file control
{
  namespace => "cfdc_webserver";
}

bundle agent setup(prefix, config, packages, processes, environments, sites, profiles, credentials)
{
  meta:
      # __PREFIX__ will be supplied by cf-sketch
      "vars[prefix][type]"               string => "NON_EMPTY_STRING";
      "vars[prefix][default]"            string => "__PREFIX__";

      "vars[config][type]"         string => "ARRAY(
root:PATH
owner:NON_EMPTY_STRING
group:NON_EMPTY_STRING
perms/file:DIGITS
perms/dir:DIGITS
)";

      "vars[packages][type]"             string => "LIST(NON_EMPTY_STRING)";

      "vars[processes][type]"            string => "KVARRAY(
_key:PATH
)";
      "vars[environments][type]"         string => "KVARRAY(
_key:NON_EMPTY_STRING
)";

      "vars[sites][type]"                string => "KVARRAY(
_key:NON_EMPTY_STRING
)";

      "vars[profiles][type]"            string => "KVARRAY(
_key:NON_EMPTY_STRING
)";

      "vars[credentials][type]"         string => "KVARRAY(
_key:NON_EMPTY_STRING
)";

  vars:
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");
      "canon_package[$(packages)]" string => canonify("$(packages)");

      "dependencies" string => join(", ", "$(prefix)sketch_depends");
      "authors" string => join(", ", "$(prefix)sketch_authors");
      "active" slist => getindices("$(environments)");
      "proc_commands" slist => getindices("$(processes)");
      "canon_proc_commands[$(proc_commands)]" string => canonify("$(proc_commands)");

  packages:
      "$(packages)" package_method => default:generic,
      classes => default:if_repaired("$(canon_prefix)installed_$(canon_package[$(packages)])");

  processes:
      "$($(processes)[$(proc_commands)])"
      restart_class => "$(canon_prefix)restart_$(canon_proc_commands[$(proc_commands)])";

  methods:
      "write" usebundle => write("$(config)",
                                 "$(active)",
                                 "$(environments)[$(active)]",
                                 "$(sites)",
                                 "$(profiles)",
                                 "$(credentials)");

  commands:
      "$(proc_commands)"
      ifvarclass => "$(canon_prefix)restart_$(canon_proc_commands[$(proc_commands)])";

  reports:
    default:debug::
      "$($(prefix)sketch_name) license = $($(prefix)sketch_license)";
      "$($(prefix)sketch_name) dependencies = $(dependencies)";

    default:verbose::
      "$($(prefix)sketch_name) version $($(prefix)sketch_version) by $(authors) starting up...";

      "Will set up environment $(active)";

      "Checked package $(packages)";

    cfengine::
      "Installed package $(packages)"
      ifvarclass => "$(canon_prefix)installed_$(canon_package[$(packages)])";

}

bundle agent write(config, env, e, sites, profiles, credentials)
{
  vars:
      "root"             string => "$($(config)[root])/$(env)",
      policy => "free";

      "data_root"        string => "$(root)/data",
      policy => "free";

      "site_root"        string => "$(root)/sites",
      policy => "free";

      "profile_root"     string => "$(root)/profiles",
      policy => "free";

      "credentials_root" string => "$(root)/credentials",
      policy => "free";

      "evars"         slist  => getindices("$(e)"),
      policy => "free";

      "mysites"       slist  => splitstring("$($(e)[sites])", " ", "100"),
      policy => "free";

      "mycredentials" slist  => splitstring("$($(e)[credentials])", " ", "100"),
      policy => "free";

      "myprofile"     string  => "$($(e)[profile])",
      policy => "free";

      "pvars"         slist => getindices("$(profiles)[$(myprofile)]"),
      policy => "free";

  files:
      "$(root)/."
      perms => default:mog("$($(config)[perms/dir])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true";


      "$(profile_root)/$(pvars)"
      perms => default:mog("$($(config)[perms/file])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines("$($(profiles)[$(myprofile)][$(pvars)])");

  methods:
      "stage 1e" usebundle => write_one("environment",
                                        $(env),
                                        $(config),
                                        $(data_root),
                                        @(write.evars),
                                        $(e));

      "stage 1p" usebundle => write_one("profile",
                                        $(myprofile),
                                        $(config),
                                        $(profile_root),
                                        @(write.pvars),
                                        "$(profiles)[$(myprofile)]");

      "sites" usebundle => write_n("site",
                                   $(mysites),
                                   $(config),
                                   "$(site_root)/$(mysites)",
                                   "$(sites)[$(mysites)]");

      "credentials" usebundle => write_n("credentials",
                                         $(mycredentials),
                                         $(config),
                                         "$(credentials_root)/$(mycredentials)",
                                         "$(credentials)[$(mycredentials)]");

      "deploy" usebundle => deploy($(config), $(env), $(e));

      "websites" usebundle => web_site($(mysites),
                                       $(config),
                                       $(env),
                                       $(e),
                                       "$(sites)[$(mysites)]",
                                       $(myprofile),
                                       "$(profiles)[$(myprofile)]");

  reports:
    default:verbose::
      "write: Wrote environment config $(env) into $(root)";
    default:debug::
      "write: profile $(myprofile)";
      "write: site $(mysites)";
      "write: credentials $(mycredentials)";
}

bundle agent write_n(type, name, config, root, array)
{
  vars:
      "vars" slist => getindices($(array)),
      policy => "free";

  methods:
      "1" usebundle => write_one($(type),
                                 $(name),
                                 $(config),
                                 $(root),
                                 @(write_n.vars),
                                 $(array));

  reports:
    default:debug::
      "write_n: unfolded $(array) for $(type) $(name)";
      "write_n: $(type) $(name) $(array) vars $(vars)";
}

bundle agent write_one(type, name, config, root, vars, array)
{
  methods:
      "e" usebundle => write_export($(type),
                                    $(name),
                                    $(config),
                                    $(root),
                                    @(write_one.vars),
                                    $(array));

  files:
      "$(root)/."
      perms => default:mog("$($(config)[perms/dir])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true";

      "$(root)/$(vars)"
      perms => default:mog("$($(config)[perms/file])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines("$($(array)[$(vars)])");

  reports:
    default:verbose::
      "write_one: Wrote $(type) $(name) into $(root)";
}

bundle agent write_export(type, name, config, root, vars, array)
{
  classes:
      "$(type)_mode" expression => "any";

  vars:
    !credentials_mode::
      "safe" slist => { @(vars) },
      policy => "free";

    credentials_mode::
      "safe" slist  => { "mailto" },
      policy => "free";

    any::
      "php_var_lines" slist => maplist("'$(this)' => '$($(array)[$(this)])'", "safe"),
      policy => "free";

      "php_var_all" string => join(",$(const.n)", "php_var_lines"),
      policy => "free";

      "php" string => "<?php
$$(type)_config = array(
$(php_var_all)
);
?>",
      policy => "free";

      "perl_var_lines" slist => maplist("'$(this)' => '$($(array)[$(this)])'", "safe"),
      policy => "free";

      "perl_var_all" string => join(",$(const.n)", "perl_var_lines"),
      policy => "free";

      "perl" string => "
our %$(type)_config = (
$(perl_var_all)
);
",
      policy => "free";

      "js_var_lines" slist => maplist("'$(this)': '$($(array)[$(this)])'", "safe"),
      policy => "free";

      "js_var_all" string => join(",$(const.n)", "js_var_lines"),
      policy => "free";

      "js" string => "
$(type)_config = {
$(js_var_all)
};
",
      policy => "free";

  files:
      "$(root)/$(type).php"
      perms => default:mog("$($(config)[perms/file])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines("$(php)");

      "$(root)/$(type).pm"
      perms => default:mog("$($(config)[perms/file])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines("$(perl)");

      "$(root)/$(type).js"
      perms => default:mog("$($(config)[perms/file])",
                           "$($(config)[owner])",
                           "$($(config)[group])"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => default:append_if_no_lines("$(js)");

  reports:
    default:verbose::
      "write_export: Wrote $(root)/$(type).php with data $(php)";
      "write_export: Safe vars for $(type) = $(safe)";
}

bundle agent deploy(config, env, e)
{
  classes:
      "have_checkout" expression => fileexists("$(path)/.git");
      "do_mirror" expression => "$($(e)[deploy][schedule])";

  vars:
      "path" string => "$($(e)[deploy][path])";

  methods:
    do_mirror||!have_checkout::
      "mirror" usebundle => cfdc_vcs:mirror($(env),
                                            canonify("$(env)"),
                                            "$($(e)[deploy][vcs])",
                                            "$(path)",
                                            "$($(e)[deploy][origin])",
                                            "$($(e)[deploy][branch])",
                                            "$($(e)[deploy][runas])",
                                            "$($(e)[deploy][umask])",
                                            "");
  files:
    !have_checkout::
      "$(path)/."
      perms => default:mog("$($(config)[perms/dir])",
                           "$($(e)[deploy][runas])",
                           "$($(config)[group])"),
      create => "true";

    have_checkout::
      "$(path)/."
      depth_search => default:recurse("inf"),
      perms => default:og("$($(e)[deploy][runas])", "$($(config)[group])");
}

bundle agent web_site(site, config, env, e, site_array, profile, profile_array)
{
  classes:
      "has_certificate"    expression => fileexists("$($(site_array)[SSLCertificateFile])");
      "has_certificatekey" expression => fileexists("$($(site_array)[SSLCertificateKeyFile])");
      "no_aliases"         expression => strcmp("$($(site_array)[aliases])", "");
      "ssl_site"           expression => strcmp($(type), "ssl");
      "has_auth"           expression => fileexists("$($(profile_array)[auth/htpasswd])");

  vars:
      "type" string => "$($(site_array)[type])";

      "root_directives" string => "",
      policy => "free";

    has_auth::
      "docroot_directives" string => "
AuthUserFile \"$($(profile_array)[auth/htpasswd])\"
AuthType Basic
AuthName \"$(site) password\"
Require valid-user
AllowOverride $($(site_array)[overrides])
",
      policy => "free";

    !has_auth::
      "docroot_directives" string => "AllowOverride $($(site_array)[overrides])
",
      policy => "free";

    !no_aliases::
      "alias_list"   slist  => splitstring("$($(site_array)[aliases])", " ", "100"),
      policy => "free";

      "alias_lines"  slist => maplist("  ServerAlias $(this)", "alias_list"),
      policy => "free";

      "aliases_str"  string => join("$(const.n)", "alias_lines"),
      policy => "free";

    no_aliases::
      "aliases_str"  string => "",
      policy => "free";

  files:
      "$($(config)[httpd_conf_d])/$(site).conf"
      perms => default:mog("$($(config)[perms/file])", "$($(config)[owner])", "$($(config)[group])"),
      classes => default:if_repaired("httpd_repaired"),
      create => "true",
      edit_defaults => default:empty,
      edit_line => expand_block_template("$($(config)[template][$(type)])");

      # "$($(config)[httpd_conf_d])/$(site).broken"
      # perms => default:mog("$($(config)[perms/file])", "$($(config)[owner])", "$($(config)[group])"),
      # classes => default:if_repaired("httpd_repaired"),
      # create => "true",
      # edit_defaults => default:empty,
      # edit_line => expand_block_template2("$($(config)[template][$(type)])");

  reports:
    ssl_site.!has_certificate::
      "You need to install the $(site) certificate file in $($(site_array)[SSLCertificateFile])";
    ssl_site.!has_certificatekey::
      "You need to install the $(site) certificate key file in $($(site_array)[SSLCertificateKeyFile])";
    default:verbose::
      "Setting up web environment for site $(site) in environment $(env)";

    httpd_repaired::
      "You should reload or restart the web server";
}

# clone of expand_template from cfengine_stdlib.cf with string + preserve_block
bundle edit_line expand_block_template(datafile)
{
  vars:
      "data" string => readfile($(datafile), 100000);

  insert_lines:

      "$(data)"
      insert_type => "preserve_block",
      comment => "Expand variables in the template string",
      expand_scalars => "true";
}

# problem clone of expand_template from cfengine_stdlib.cf with file_preserve_block
bundle edit_line expand_block_template2(datafile)
{
  insert_lines:

      "$(datafile)"
      insert_type => "file_preserve_block",
      comment => "Expand variables in the template string",
      expand_scalars => "true";
}
