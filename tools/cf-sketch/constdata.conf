{
   "validations" : {
    "AWS_S3_VALIDATION":
    {
     "array_k": ["STRING_NONEMPTY"],
     "array_v": ["STRING_NONEMPTY"],
     "array_map_strict":
     {
      "security_group": "STRING_NONEMPTY",
      "block_device_mapping": "STRING_NONEMPTY",
      "ssh_pub_key": "PATH_ABSOLUTE_UNIX",
      "netrc": "PATH_ABSOLUTE_UNIX"
     }
    },
      "CLOUD_PLATFORM" : {
         "description" : "Cloud platform",
         "choice" : [
            "ec2",
            "openstack",
            "vmware"
         ]
      },
      "DIGITS": { "valid_regex": "^[0-9]+$" },
      "HASH_ALGORITHM" : {
         "description" : "Hash algorithm",
         "choice" : [
            "md5",
            "sha1",
            "sha224",
            "sha256",
            "sha384",
            "sha512",
            "best"
         ]
      },
      "HOSTNAME" : {
         "description" : "Host name",
         "valid_regex" : "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
      },
      "IFELAPSED" : {
         "descripton" : "Time in minutes that must elapse before promise will be rechecked",
         "maximum_value": 99999999999,
         "minimum_value": 0,
      },
      "IPADDRESS" : {
         "description" : "Host name or IP address",
         "valid_regex" : "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]))$"
      },
      "LIST_OF_STRING_NONEMPTY" : {
         "list" : [
            "STRING_NONEMPTY"
         ]
      },
      "LIST_OF_PACKAGE_NAME" : {
         "list" : [
            "PACKAGE_NAME"
         ]
      },
      "LIST_OF_PATH_ABSOLUTE_UNIX_OR_WINDOWS" : {
         "list" : [
            "PATH_ABSOLUTE_UNIX_OR_WINDOWS"
          ]
      },
      "PASSWD_HASH_UNIX" : {
         "description" : "Unix hashed password",
         "valid_regex" : "^(\\$.+\\$.+|NP|!|!!|LK|\\*|null)$"
      },
      "PATH_ABSOLUTE_UNIX" : {
         "description" : "Absolute path on Unix",
         "valid_regex" : "^(/.*)$"
      },
      "PATH_ABSOLUTE_UNIX_OR_WINDOWS" : {
         "description" : "Absolute path on Unix or Windows",
         "valid_regex" : "^([a-zA-Z]:.*|/.*)$"
      },
      "PATH_ABSOLUTE_WINDOWS" : {
         "description" : "Absolute path on Windows",
         "valid_regex" : "^([a-zA-Z]:.*)$"
      },
      "PORT_NUMBER" : {
         "description" : "Port number",
         "maximum_value" : 65535,
         "minimum_value" : 0
      },
      "SEQUENCE_USER_UNIX" : {
         "description" : "Unix user attributes",
         "sequence" : [
            "USERNAME_UNIX",
            "STRING_NONEMPTY",
            "UID_UNIX",
            "PATH_ABSOLUTE_UNIX",
            "PATH_ABSOLUTE_UNIX",
            "PASSWD_HASH_UNIX"
         ]
      },
      "STRING_NONEMPTY" : {
         "description" : "Arbitrary string",
         "valid_regex" : ".+"
      },
      "UID_UNIX" : {
         "description" : "Unix user identifier",
         "maximum_value" : 65535,
         "minimum_value" : 0
      },
      "USERNAME_UNIX" : {
         "description" : "Unix user name",
         "valid_regex" : "^[a-zA-Z0-9_\\-]+$"
      },
      "PACKAGE_NAME" : {
         "description" : "Package name",
         "valid_regex" : "^[a-zA-Z0-9\\-\\._]+$"
      },
      "CLASSNAME" : {
         "description" : "A valid class name",
         "valid_regex" : "^\\w+$"
      },
      "URL": {
          "description" : "A valid URL",
          "valid_regex": "^[A-Za-z]{3,9}://.+"
      },
   },

 "selftests":
 [
     {
         "name": "deactivate all activations",

         "subtests":
         [
             {
                 "command": { "deactivate": true },
                 "expected": { "success": true }
             },
             {
                 "command": { "deactivate": true },
                 "expected": { "success": true, "data": {} }
             },
             {
                 "command": { "activations": true },
                 "expected": { "success": true, "data": { "activations": {} } }
             }
         ],
     },
     {
         "name": "define strict array validation and test it against some data",

         "subtests":
         [
             {
                 "command": { "undefine_validation": "AWS_S3_VALIDATION" },
                 "expected": { "success": true },
             },
             {
                 "command":
                 {
                     "define_validation":
                     {
                         "AWS_S3_VALIDATION":
                         {
                             "array_k": ["STRING_NONEMPTY"],
                             "array_v": ["STRING_NONEMPTY"],
                             "array_map_strict":
                             {
                                 "security_group": "STRING_NONEMPTY",
                                 "block_device_mapping": "STRING_NONEMPTY",
                                 "ssh_pub_key": "PATH_ABSOLUTE_UNIX",
                                 "netrc": "PATH_ABSOLUTE_UNIX"
                             },
                         },
                     },
                 },
                 "expected": { "success": true },
             },
             {
                 "command": { "validate": { "validation": "AWS_S3_VALIDATION", "data": "string me along" } },
                 "expected": { "success": false, "errors": ["The 'array_k' validation can't take a scalar_value"], },
             },
             {
                 "command": { "validate": { "validation": "AWS_S3_VALIDATION", "data": { "security_group": "any group", "netrc": [ "an array", "two elements" ] } } },
                 "expected": { "success": false, "errors": ["Could not validate any of the allowed array_v types [STRING_NONEMPTY]"] },
             },
             {
                 "command": { "validate": { "validation": "AWS_S3_VALIDATION", "data": { "unknown_key": "any thing" } } },
                 "expected": { "success": false, "errors": ["The key 'unknown_key' is not valid."] },
             },
             {
                 "command": { "validate": { "validation": "AWS_S3_VALIDATION", "data": { "security_group": "any group", "netrc": "/other/path/here", "ssh_pub_key": "/the/key/location" } } },
                 "expected": { "success": true, "errors": [] }
             },
         ],
     },
     {
         "name": "clear all environments and then define two environments",

         "subtests":
         [
             {
                 "command": { "undefine_environment": true },
                 "expected": { "success": true },
             },
             {
                 "command": { "define_environment": { "path_override": { "activated": true, "test": true, "verbose": true, "qa": true, "path_prefix": "/tmp/contain" } } },
                 "expected": { "success": true, "data": { "define_environment": { "path_override": 1 } } },
             },
             {
                 "command": { "define_environment": { "default": { "activated": true, "test": false, "verbose": false } } },
                 "expected": { "success": true, "data": { "define_environment": { "default": 1 } } },
             },
             {
                 "command": { "environments": true },
                 "expected":
                 {
                     "success": true,
                     "data":
                     {
                         "environments":
                         {
                             "path_override": { "activated": "1", "test": "1", "verbose": "1", "qa": "1", "path_prefix": "/tmp/contain" },
                             "default": { "activated": "1", "test": "", "verbose": "" }
                         }
                     }
                 }
             },
         ],
     },
     {
         "name": "install and activate two sketches",

         "subtests":
         [
             {
                 "command": {"define_environment": { "testing": { "activated": true, "test": true, "verbose": true } } },
                 "expected": { "success": true, "data": { "define_environment": { "testing": 1 } } },
             },
             {
                 "command": { "install": { "sketch": "Packages::installed", "force": true } },
                 "expected": { "success": true },
             },
             {
                 "command": { "install": { "sketch": "Packages::installed" } },
                 "expected": { "success": true, "log": ["Sketch Packages::installed is already in target repo; you must uninstall it first"] },
             },
             {
                 "command": { "install": { "sketch": "VCS::vcs_mirror", "force": true } },
                 "expected": { "success": true },
             },
             {
                 "command":
                 {
                     "define":
                     {
                         "vcs_base": { "VCS::vcs_mirror":
                                     {
                                         "options":
                                         {
                                             "parent_dir":
                                             {
                                                 "owner": { "function": "getenv", "args": ["LOGNAME", "128"] },
                                                 "group": { "function": "getenv", "args": ["LOGNAME", "128"] },
                                                 "perms": "755",
                                                 "ensure": true
                                             },
                                             "nowipe": true,
                                             "vcs":
                                             {
                                                 "runas": { "function": "getenv", "args": ["LOGNAME", "128"] },
                                                 "umask": "000"
                                             }
                                         }
                                     }
                                   },
                     },
                 },
                 "expected": { "success": true, "data": { "define": { "vcs_base": 1 } } },
             },
             {
                 "command":
                 {
                     "define":
                     {
                         "git_mirror_core": { "VCS::vcs_mirror":
                                            {
                                                "vcs": "/usr/bin/git",
                                                "path": "/tmp/q/cfengine-core",
                                                "branch": "master",
                                                "origin": "https://github.com/cfengine/core.git"
                                            },
                                          },
                     },
                 },
                 "expected": { "success": true, "data": { "define": { "git_mirror_core": 1 } } },
             },
             {
                 "command":
                 {
                     "define":
                     {
                         "svn_mirror_thrift": { "VCS::vcs_mirror":
                                              {
                                                  "vcs": "/usr/bin/svn",
                                                  "path": "/tmp/thrift-perl-lib",
                                                  "branch": "",
                                                  "origin": "http://svn.apache.org/repos/asf/thrift/attic/trunk/lib/perl",
                                                  "options": { "parent_dir": { "ensure": false } },
                                              },
                                            },
                     }
                 },
                 "expected": { "success": true, "data": { "define": { "svn_mirror_thrift": 1 } } },
             },
             {
                 "command":
                 {
                     "deactivate": true,
                 },
                 "expected": { "success": true },
             },
             {
                 "command":
                 {
                     "activate": { "VCS::vcs_mirror": { "environment": "testing", "params": [ "vcs_base", "git_mirror_core" ] } },
                 },
                 "expected":
                 {
                     "success": true,
                     "data":
                     {
                         "activate":
                         {
                             "VCS::vcs_mirror":
                             {
                                 "params": ["vcs_base", "git_mirror_core"],
                                 "environment": "testing"
                             }
                         }
                     },
                 },
             },
             {
                 "command":
                 {
                     "activate": { "VCS::vcs_mirror": { "environment": "testing", "params": [ "vcs_base", "svn_mirror_thrift" ] } },
                 },
                 "expected":
                 {
                     "success": true,
                     "data":
                     {
                         "activate":
                         {
                             "VCS::vcs_mirror":
                             {
                                 "params": ["vcs_base", "svn_mirror_thrift"],
                                 "environment": "testing"
                             }
                         }
                     },
                 },
             },
         ],
     },
     {
         "name": "search and list sketches, existing and missing",

         "subtests":
         [
             {
                 "command": { "search": "VCS::vcs_mirror", "count_only": true },
                 "expected": { "success": true, "data": { "count": 1 } },
             },
             {
                 "command": { "install": { "sketch": "VCS::vcs_mirror", "force": true } },
                 "expected": { "success": true },
             },
             {
                 "command": { "list": "VCS::vcs_mirror", "count_only": true },
                 "expected": { "success": true, "data": { "count": 1 } },
             },
             {
                 "command": { "search": "VCS::vcs_mirror::nosuchmatch", "count_only": true },
                 "expected": { "success": true, "data": { "count": 0 } },
             },
             {
                 "command": { "search": "VCS::vcs_mirror_", "count_only": true },
                 "expected": { "success": true, "data": { "count": 0 } },
             },
             {
                 "command": { "list": "VCS::vcs_mirror", "describe": "README" },
                 "expected": { "success": true },
                 "expected_match": "Check out and update a VCS repository",
             },
             {
                 "command": { "list": "VCS::vcs_mirror", "describe": 1 },
                 "expected": { "success": true },
                 "expected_match": "Sample parameters to use Git to check out",
             },
         ],
     },
     {
         "name": "generate runfile",

         "subtests":
         [
             {
                 "command": { "regenerate": { } },
                 "expected": { "success": true, "data": { } },
             },
         ],
     },

     {
         "name": "generate cfsketches.json",

         "subtests":
         [
             {
                 "command": { "regenerate_index": "/tmp/nosuchdir" },
                 "expected": { "success": false, "data": { } },
             },
         ],
     },
 ],
}
