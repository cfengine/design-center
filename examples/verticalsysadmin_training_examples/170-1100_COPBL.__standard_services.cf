bundle agent example {

  methods:
      
      any::
      
          "Manage www service"

              usebundle => standard_services ("www", "stop");

}


bundle agent standard_services(service,state)
{
 # DATA, 

vars:

 linux::

  "startcommand[varnish]" string => "/etc/init.d/varnish start";
  "stopcommand[varnish]"  string => "/etc/init.d/varnish stop";
  "pattern[varnish]"      string => ".*varnish.*";

 suse::

  "startcommand[www]" string => "/etc/init.d/apache2 start";
  "stopcommand[www]"  string => "/etc/init.d/apache2 stop";
  "pattern[www]"      string => ".*httpd.*";

  "startcommand[mysql]" string => "/etc/init.d/mysqld start";
  "stopcommand[mysql]"  string => "/etc/init.d/mysqld stop";
  "pattern[mysql]"      string => ".*mysqld.*";

  "startcommand[tomcat]" string => "/etc/init.d/tomcat5 start";
  "stopcommand[tomcat]"  string => "/etc/init.d/tomcat5 stop";
  "pattern[tomcat]"      string => ".*tomcat5.*";

 redhat::

  "startcommand[www]"     string => "/etc/init.d/httpd start";
  "stopcommand[www]"      string => "/etc/init.d/httpd stop";
  "pattern[www]"          string => ".*httpd.*";

 debian|ubuntu::

  "startcommand[www]"     string => "/etc/init.d/httpd start";
  "stopcommand[www]"      string => "/etc/init.d/httpd stop";
  "pattern[www]"          string => ".*apache2.*";

  "startcommand[mysql]" string => "/etc/init.d/mysql start";
  "stopcommand[mysql]"  string => "/etc/init.d/mysql stop";
  "pattern[mysql]"      string => ".*mysqld.*";

  "startcommand[tomcat]" string => "/etc/init.d/tomcat6 start";
  "stopcommand[tomcat]"  string => "/etc/init.d/tomcat6 stop";
  "pattern[tomcat]"      string => ".*tomcat6.*";



 # METHODS that implement these ............................................

classes:

  "start" expression => strcmp("start","$(state)"),
             comment => "Check if to start a service";
  "stop"  expression => strcmp("stop","$(state)"),
             comment => "Check if to stop a service";

# Do we want to include the packages here too?

processes:

  start::

    "$(pattern[$(service)])"

             comment => "Verify that the service appears in the process table",
       restart_class => "restart_$(service)";

  stop::

    "$(pattern[$(service)])"

            comment => "Verify that the service does not appear in the process",
       process_stop => "$(stopcommand[$(service)])",
            signals => { "term", "kill"};

  commands:

   "$(startcommand[$(service)])"

            comment => "Execute command to restart the $(service) service",
         ifvarclass => "restart_$(service)";

}
