                       EXERCISES


(If you finish early, please study the Reference
Manual, chapters 1 - 4.)

1. Write a policy to signal TERM and then KILL to any
process matching "trn".

  Testing it:

    cp /bin/sleep ~/trn
    ~/trn 1000 &
    cf-agent -f ...

1b. Make a list of processes you don't want to run
(let's say "trn" and "eggdrop") and put this list 
into an slist variable.  Write a promise to signal
'term' and then 'kill' to any process in that
list.
 


EXERCISE 2

Write a policy to create /tmp/myname.txt and put
your name in it.




EXERCISE 3

Manually create a template:
echo 'Hello, $(mybundle.myname).  The time is $(sys.date).' > /tmp/file.tmpl


Note: a fully qualified variable consists of the bundle 
name wherein the variable is defined plus the variable 
name.  Example: 

    bundle agent mybundle { vars: "myvar" string => "myvalue"; }

The fully qualified variable name is $(mybundle.myvar).


Now write a policy to populate contents of /tmp/file.txt
using this template file, /tmp/file.tmpl. 

Make sure your bundle defines the variable embedded in the
template, and that your bundle name matches the bundle name
embedded in the template.

Your policy should use an edit_lines bundle containing an
insert_lines promise with the following attributes:

      insert_type => "file",
      expand_scalars => "true";

If you finish before rest of the group, finish studying 
the CFEngine Reference Manual chapters 1 -4, and if you
finish that, then study the Special Topic guide on Editing
File Content.


EXERCISE 4.  Classes.

Set a custom class based on the existance of a file.
For example:

    classes:

       "file_exists"
         
           expression  =>  fileexists("/etc/site_id") ;

Then write another promise that is conditional on the 
above class.

Run it when the file exists, and when it does not, and
observe how CFEngine dynamically configures your server.








EXERCISE 5.  File Editing

Write a policy to create /etc/motd as follows:
It should *always* say "Unauthorized use forbidden."

EXERCISE 5b.  File Editing and Classes
Write a policy to create /etc/motd as follows:
It should *always* say "Unauthorized use forbidden."

On weekends only it should have an extra line that says
"go home, it's the weekend".






















===========================================================

EXERCISE 6.  Running CFEngine Non-Interactively (as a Service)

Demonstrating of CFEngine running in non-interactive
mode, using /var/cfengine/inputs/promises.cf as its
input:


1. Specify a bundlesequence in your policy from exercise 5.

Add to your policy:

   body common control {

        bundlesequence =>  { "..." };

   }


2. Copy exercise 5 to /var/cfengine/inputs/promises.cf, and

3. Make your failsafe.cf identical to promises.cf:

      cd /var/cfengine/inputs
      ln -s promises.cf failsafe.cf

4. Check the syntax of the default input file (promises.cf):

      cf-promises

5. Run CFengine from command line once to make sure
   it all works:

      cf-agent

6. Restart CFEngine service to reload the policy.

      /etc/init.d/cfengine3 restart


7. Make sure you don't have an /etc/motd file: 
 
     rm /etc/motd

8. Watch CFEngine create /etc/motd within 5 minutes.

     watch ls -l /etc/motd 2>/dev/null








EXERCISE 6.  File Editing - replace_patterns - uses COPBL

Create (manually) a data file:

   /tmp/data.txt

        line 1
        line 2
        line 3

Use cf-agent to replace "line 2" with "line two".


EXERCISE 6b.  File Editing - replace_patterns - uses COPBL

Write a policy where the template contains a placeholder tag
of the form __TAGNAME__

The template, /tmpl/motd.tmpl should contain:

    This system is property of __ORGANIZATION__.
    Unauthorized use forbidden.  
    CFEngine maintains this system and last ran on $(sys.date).

Write a CFEngine policy to generate /etc/motd from this
template. 

Your policy should replace __ORGANIZATION__ with the
name of your organization.

Your policy should expand the special variable $(sys.date).

Use all of the following promise types:

delete_lines
insert_lines
replace_patterns

If you finish before rest of the group, finish studying 
the CFEngine Reference Manual chapters 1 -4, and if you
finish that, then study the Special Topic guide on Editing
File Content.


EXERCISE 7. Integrate your motd policy into the default cfengine policy

===============================================================
[For faster students]

EXERCISE 8. Reporting when CFEngine makes a change to your system

Read the Special Topics guide on Reporting.  Now write
a policy that logs to /var/log/repairs.txt if a promise
is repaired by CFEngine.

===============================================================

EXERCISE 11 - Precision File Editing


Insert the following three lines (and you can keep them
in order, as a single block, using
   insert_type => "preserve_block";
) into /etc/profile BEFORE the HOSTNAME=... line.


if [ -x /bin/custom ]
  then /bin/custom
fi




EXERCISE 15 - Classes

Reminder:  make any changes to promises.cf in /var/cfengine/masterfiles.
If you make them in /var/cfengine/inputs, they may get overwritten if/when
failsafe.cf kicks in.

Problem:  All workstations should be shutdown at end of class at 15:40.

Desired state:  The command "shutdown -h now" is run during the 15:40 - 15:45
window.

Add to "bundle agent main" in promises.cf a promise to shutdown the
workstation at 15:40.  Copy promises.cf from masterfiles to inputs.
Make sure cf-execd is running.


EXERCISE 16 - COPBL

Given a file /tmp/file.txt:

apples
oranges

Use the COPBL to comment out "oranges" and append "bananas", resulting in:

apples
# oranges
bananas

Hint: use "bundle edit_line insert_lines" and "bundle edit_line comment_lines_matching".


EXERCISE 17 - COPBL - contain a command

Run the command /usr/bin/id as user "nobody".

Hint: use "body contain setuid".



EXERCISE 18 - COPBL - linking promises together

Problem: Increase security by ensuring sshd is running with
"PermitRootLogin no".

How does the system look like in the correct configuration:
1. Make sure /etc/ssh/sshd_config contains the line "PermitRootLogin no"
2. Make sure sshd is running using this configuration

How to code it in CFEngine:
1. a files promise to edit sshd_config
2. a commands promise to restart sshd to reload the new config

Exercise:  use the "body classes if_repaired" to link 1 and 2
to make sure 2 happens.


EXERCISE 19 - Bonus Points - Restart sshd if the process start
time of sshd predates the modification timestamp of /etc/ssh/sshd_config
(Process selection is demonstrated in *Process_Selection* in
verticalsysadmin_training_examples)


















