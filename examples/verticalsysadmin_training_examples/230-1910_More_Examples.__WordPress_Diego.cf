#Install WordPress:
#       1. Install Infrastructure:
#               1.1. Install httpd and mod_php and PHP MySQL client.
#               1.2. Install MySQL server.
#                       1.2.1. Create WordPress User in MySQL.
#                       1.2.2. Create WordPress Database in MySQL.
#               1.3. Make sure httpd and MySQL servers are running.
#       2. Install the PHP application (WordPress)
#               2.1. Download tarball with the latest version of WordPress PHP application.
#               2.2. Extract it into the httpd document root where it can be run by the Web server.
#               2.3. Create WordPress config file wp-config.php from wp-config-sample.php that's shipped with WordPress.
#               2.4. Tweak wp-config.php to put in the data needed to establish database connection (db name, db username and password).
#       

bundle agent example {

  methods:

      "Install WordPress"
            usebundle => wordpress_install;

}

bundle agent wordpress_install
{
  vars:
      "wp_config[DB_NAME]"      string => "wordpress";
      "wp_config[DB_USER]"      string => "wordpress";
      "wp_config[DB_PASSWORD]"  string => "lopsa10linux";
      "wp_config[htmlroot]"     string => "/var/www/html";
      "wp_config[tarfile]"      string => "/root/wordpress-latest.tar.gz";
      "wp_config[wp_dir]"       string => "$(wp_config[htmlroot])/wordpress";
      "wp_config[wp_config]"    string => "$(wp_config[wp_dir])/wp-config.php";
      "wp_config[wp_cfgsample]" string => "$(wp_config[wp_dir])/wp-config-sample.php";

  methods:

      "Infrastructure"

               handle => "wp_infrastructure",
              comment => "httpd, PHP, MySQL and everything in-between",
            usebundle => wp_infrastructure;

      "Application"

               handle => "wp_application",
              comment => "Install and Configure WordPress PHP app",
            usebundle => wp_application;

}

bundle agent wp_application {

  methods:
      "any" usebundle => wp_tarball_is_present("wordpress_install.wp_config");
      "any" usebundle => wp_tarball_is_unrolled("wordpress_install.wp_config"); 
      "any" usebundle => wp_config_exists("wordpress_install.wp_config");
      "any" usebundle => wp_is_properly_configured("wordpress_install.wp_config");
}

bundle agent wp_infrastructure {

  methods:
      "any" usebundle => wp_packages_installed("wordpress_install.wp_config");
      "any" usebundle => wp_services_up("wordpress_install.wp_config");
      "any" usebundle => wp_mysql_configuration("wordpress_install.wp_config"); 
      #"any" usebundle => wp_allow_http_inbound("wordpress_install.wp_config");
}

#############################################

bundle agent wp_packages_installed(params)
{
  vars:
    debian::
      "desired_package" slist => { 
                                   "apache2", 
                                   "php5",
                                   "php5-mysql",
                                   "mysql-server",
      };
    redhat::
      "desired_package" slist => { 
                                   "httpd",
                                   "php",
                                   "php-mysql",
                                   "mysql-server",
      };
  packages:
      "$(desired_package)"
               handle => "install_packages",
              comment => "Install needed packages",
       package_policy => "add",
package_architectures => { "x86_64" },
       package_method => generic,
              classes => if_repaired("packages_added");

  commands: 
    packages_added.debian::
      "/usr/sbin/service httpd graceful" 
              comment => "Restarting httpd so it can pick up any new modules.";

  commands: 
    packages_added.redhat::
      "/sbin/service httpd graceful" 
              comment => "Restarting httpd so it can pick up any new modules.";
}

#############################################

bundle agent wp_services_up(params)
{
  processes:
      "mysqld" restart_class => "start_mysqld";
    redhat::
      "httpd"  restart_class => "start_httpd";
    debian::
      "apache2"  restart_class => "start_httpd";

  commands:
    start_mysqld&debian::
      "/usr/sbin/service mysqld start";

    start_mysqld&redhat::
      "/sbin/service mysqld start";

    start_httpd&redhat::
      "/sbin/service httpd start";

    start_httpd&debian::
      "/usr/sbin/service httpd start";
}

#############################################

bundle agent wp_tarball_is_present(params)
{

  classes:
      "wordpress_tarball_is_present"
               handle => "check_for_WP_tarball",
              comment => "check if we already have the WP tarball",
           expression => fileexists("$($(params)[tarfile])");

  commands:
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q --timeout=10 -O $($(params)[tarfile]) http://wordpress.org/latest.tar.gz"
               handle => "download_WP_tarball",
              classes => if_repaired("we_have_WP_tarball"),
              comment => "Downloading latest version of WordPress.",
              action => logme("promise download_WP_tarball");
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{

  classes:
      "wordpress_directory_is_present" expression => fileexists("$($(params)[htmlroot])/wordpress/");

  commands:
    we_have_WP_tarball&(!wordpress_directory_is_present)::
      "/bin/tar -C $($(params)[htmlroot]) -xzf $($(params)[tarfile])"
               handle => "extract_tarball",
              depends_on => { "download_WP_tarball" },
              comment => "Unroll wordpress tarball to HTML document root";
}

#############################################

bundle agent wp_mysql_configuration(params)
{

  commands:
      "/usr/bin/mysql -u root -e \"
CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
TO '$($(params)[DB_USER])'@localhost
IDENTIFIED BY '$($(params)[DB_PASSWORD])';
FLUSH PRIVILEGES;\"
"
               handle => "setup_db",
              comment => "Create DB, DB user, and access credentials";

}

#############################################

bundle agent wp_config_exists(params)
{

  classes:
      "wordpress_config_file_exists" 
               handle => "check_WP_config_file_there",
              comment => "Check if WP config file is present",
           expression => fileexists("$($(params)[wp_config])");

  files:
    !wordpress_config_file_exists::
      "$($(params)[wp_config])"
               handle => "copy_WP_config_file",
              comment => "Copy WP config file from config sample file",
            copy_from => local_cp("$($(params)[wp_cfgsample])"),
                perms => m("a+r");
}

#############################################

bundle agent wp_is_properly_configured(params)
{
  vars:
      "wpparams" slist => getindices("$(params)");

  files:
      "$($(params)[wp_config])"
               handle => "configure_wordpress",
              comment => "Make sure wp-config.php is properly configured",
            edit_line => replace_or_add("define\('$(wpparams)', *'(?!$($(params)[$(wpparams)])).*",
                                        "define('$(wpparams)', '$($(params)[$(wpparams)])');");
}

#############################################

bundle agent wp_allow_http_inbound(params)
{

  commands: 
    iptables_edited::
      "/sbin/service iptables stop"
              comment => "Stopping iptables to allow inbound HTTP connections";
}

body common control
{
               inputs =>          { "libraries/cfengine_stdlib.cf" };

}


body action logme(x)
{
           log_string => "$(sys.date) $(x)";

             log_kept => "/var/log/cfengine_keptlog.log";
         log_repaired => "/var/log/cfengine_replog.log";
           log_failed => "/var/log/cfengine_faillog.log";

}

