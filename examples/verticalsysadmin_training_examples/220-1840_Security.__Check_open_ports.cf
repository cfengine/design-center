bundle agent example {

  vars:
      "listening_ports_and_processes_ideal_scene"
               handle => "expected_tcp_profile",
              comment => "expected network profile (listenting ports)",
               string => "22 sshd 80 httpd 443 httpd 5308 cf-server";

      # end of our expected configuration

  vars:
    centos_5::
      "listening_ports_and_processes"
               handle => "actual_tcp_profile",
              comment => "Our actual network profile",
               string =>
      execresult("/usr/sbin/lsof -i -n -P | \
/bin/grep LISTEN | \
/bin/sed -e 's#*:##' | \
/bin/grep -v 127.0.0.1 | \
/bin/grep -v ::1 | \
/bin/awk '{print $8,$1}' | \
/bin/sort | \
/usr/bin/uniq | \
/bin/sort -n | \
/usr/bin/xargs echo", "useshell");  # this is our
      # actual configuration.
      # we tell CFEngine to use a shell with "useshell"
      # to do a pipeline.

    centos_6::
      "listening_ports_and_processes"
               handle => "actual_tcp_profile",
              comment => "Our actual network profile",
               string =>
      execresult("/usr/sbin/lsof -i -n -P | \
/bin/grep LISTEN | \
/bin/sed -e 's#*:##' | \
/bin/grep -v 127.0.0.1 | \
/bin/grep -v ::1 | \
/bin/awk '{print $9,$1}' | \
/bin/sort | \
/usr/bin/uniq | \
/bin/sort -n | \
/usr/bin/xargs echo", "useshell");

  classes:
      "reality_does_not_match_ideal_scene"
               handle => "check_profile",
              comment => "Compare desired and actual configuration",
                  not => strcmp (
                                  "$(listening_ports_and_processes)",
                                  "$(listening_ports_and_processes_ideal_scene)"
                  );  # check whether expected configuration matches actual.

  reports:
    reality_does_not_match_ideal_scene::
      "
DANGER!!!
DANGER!!!  Expected open ports and processes:
DANGER!!!  $(listening_ports_and_processes_ideal_scene)
DANGER!!!
DANGER!!!  Actual open ports and processes:
DANGER!!!  $(listening_ports_and_processes)
DANGER!!!
";  # and yell loudly if it does not match.
      # Note:  A "commands" promise could be used in
      # addition to "reports" to send a text message
      # to a sysadmin cell phone, or to feed
      # CRITICAL status to a monitoring system.
}
