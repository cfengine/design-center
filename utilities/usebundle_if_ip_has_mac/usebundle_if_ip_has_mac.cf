bundle agent cfdc_usebundle_if_ip_has_mac(callbundle, ip, maclist){
# arg1: string
# arg2: string
# arg3: slist
# execute a bundle if an ip has a known mac addres
# Usefull for performing operatings under certain network conditions.
# Consider when networks overlap in multiple enviornments and the agent may
# migrate between them like a laptop.
#
# Important note, the bundle to call may not take any paramaters
#   vars:
#       "ip"          string => "192.168.1.254";
#       "known_macs"  slist => { "98:2c:be:27:e8:c9" };
#
#   methods:
#       "any" usebundle => cfdc_usebundle_if_ip_has_mac("bundlename", "$(ip)", @(main.known_macs));
#
    vars:
        linux::
            "ip_mac_detected"
                string     => execresult("/usr/sbin/arp $(ip)", "useshell"),
                ifvarclass => "can_ping_ip",
                comment    => "If we can ping the svn ip, get the arp entry";

            "known_macs"
                slist      => { "@(usebundle_if_ip_has_mac.maclist)" },
                comment    => "Import the list locally";

    classes:
        linux::
            "can_ping_ip"      expression => returnszero("/bin/ping -qc 1 $(ip) > /dev/null 2>&1", "useshell");
            "ip_has_known_mac" expression => regcmp(".*\s$(known_macs)\s.*", "$(ip_mac_detected)");

    methods:
        linux::
            "any" usebundle => "$(callbundle)",
                ifvarclass => "can_ping_ip.ip_has_known_mac",
                comment    => "Call requested bundle";

    reports:
        (inform_mode|verbose_mode).can_ping_ip.ip_has_known_mac::
            "calling $(callbundle) because $(ip) has known mac";

}
